diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..69c6e1fa0e423f8bdf56d31d2f04090a3df36cab
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,5 @@
+.pio/
+*.png
+*.PNG
+*.pdf
+*.PDF
diff --git a/.vscode/extensions.json b/.vscode/extensions.json
new file mode 100644
index 0000000000000000000000000000000000000000..a72f1ec63fc7e4e0d8871b5bf1763cf29808e0dc
--- /dev/null
+++ b/.vscode/extensions.json
@@ -0,0 +1,5 @@
+{
+  "recommendations": [
+    "platformio.platformio-ide"
+  ]
+}
diff --git a/DCCNext-Controlled-Kato-Turntable.sch b/DCCNext-Controlled-Kato-Turntable.sch
deleted file mode 100644
index 3405cb70bf87d4990aa3bab16a6863eb2ab694e7..0000000000000000000000000000000000000000
--- a/DCCNext-Controlled-Kato-Turntable.sch
+++ /dev/null
@@ -1,707 +0,0 @@
-EESchema Schematic File Version 4
-EELAYER 30 0
-EELAYER END
-$Descr A4 11693 8268
-encoding utf-8
-Sheet 1 1
-Title "DCC Controlled Kato Turntable"
-Date "2020-08-09"
-Rev "0.1"
-Comp "John van Staaijeren"
-Comment1 ""
-Comment2 ""
-Comment3 ""
-Comment4 ""
-$EndDescr
-$Comp
-L Connector_Generic:Conn_01x08 J2
-U 1 1 5F1F27A4
-P 7700 2100
-F 0 "J2" V 8200 2400 50  0000 C CNN
-F 1 "Kato Turntable (Red=SW)" V 8100 2000 50  0000 C CNN
-F 2 "Connector_PinHeader_2.54mm:PinHeader_1x08_P2.54mm_Vertical" H 7700 2100 50  0001 C CNN
-F 3 "~" H 7700 2100 50  0001 C CNN
-	1    7700 2100
-	0    -1   -1   0   
-$EndComp
-$Comp
-L DCC-Controlled-Kato-Turntable_Library:Relay_HFD2_005-S-L2-D K1
-U 1 1 5F21B158
-P 8900 3650
-F 0 "K1" V 9465 3675 50  0000 C CNN
-F 1 "HFD2_005-S-L2-D" V 9374 3675 50  0000 C CNN
-F 2 "DCC-Controlled-Kato-Turntable:Relay_HFD2_W7.62mm_LongPads" H 8900 3650 50  0001 C CNN
-F 3 "https://www.hongfa.com/product/detail/9974ede8-6db0-490e-8d9a-212d7dc3cf80" H 8900 3650 50  0001 C CNN
-	1    8900 3650
-	0    -1   -1   0   
-$EndComp
-Wire Wire Line
-	8700 2300 8700 3000
-Wire Wire Line
-	8800 2300 8800 3000
-Text Notes 4000 2050 1    50   ~ 0
-P15-D18 (A4-SDA)
-Text Notes 4100 2050 1    50   ~ 0
-P14-D17 (A3)
-Text Notes 4200 2050 1    50   ~ 0
-P13-D16 (A2)
-Text Notes 4300 2050 1    50   ~ 0
-P12-D15 (A1)
-Text Notes 4400 2050 1    50   ~ 0
-P11-D14 (A0)
-Text Notes 5100 2050 1    50   ~ 0
-P8-D10 (PWM)
-Text Notes 5200 2050 1    50   ~ 0
-P7-D9 (PWM)
-Text Notes 5300 2050 1    50   ~ 0
-P6-D8
-Text Notes 5400 2050 1    50   ~ 0
-P5-D7
-Text Notes 5500 2050 1    50   ~ 0
-P4-D6 (PWM)
-Text Notes 5600 2050 1    50   ~ 0
-P3-D5 (PWM)
-Text Notes 5700 2050 1    50   ~ 0
-P2-D4
-Text Notes 5800 2050 1    50   ~ 0
-P1-D3
-Text Notes 7400 2050 1    50   ~ 0
-Switch
-Text Notes 7500 2050 1    50   ~ 0
-GND
-Text Notes 7600 2050 1    50   ~ 0
-TurnM1
-Text Notes 7700 2050 1    50   ~ 0
-TurnM2
-Text Notes 8000 2050 1    50   ~ 0
-BridgeL
-Text Notes 8100 2050 1    50   ~ 0
-BridgeR
-Text Notes 3800 2050 1    50   ~ 0
-+5V
-Text Notes 3700 2050 1    50   ~ 0
-GND
-Text Notes 4900 2050 1    50   ~ 0
-P10-D12
-NoConn ~ 8600 4350
-NoConn ~ 8700 4350
-NoConn ~ 8800 4350
-NoConn ~ 8900 4350
-Wire Wire Line
-	6500 3500 6500 3400
-Wire Wire Line
-	6500 3400 6300 3400
-Wire Wire Line
-	6300 3500 6300 3400
-Wire Wire Line
-	8400 3900 8450 3900
-Text Notes 8700 2000 1    50   ~ 0
-K
-Text Notes 8800 2000 1    50   ~ 0
-J
-Wire Wire Line
-	8700 3000 8400 3000
-Wire Wire Line
-	7600 2300 7600 3900
-Wire Wire Line
-	9350 3900 9350 4000
-Wire Wire Line
-	9300 3900 9350 3900
-Wire Wire Line
-	9300 4000 9350 4000
-Wire Wire Line
-	5800 3400 6300 3400
-Text Notes 3900 2050 1    50   ~ 0
-P16-D19 (A5-SCL)
-Text Notes 5000 2050 1    50   ~ 0
-P9-D11 (PWM)
-Wire Wire Line
-	7500 2300 7500 2800
-Wire Wire Line
-	5800 2300 5800 2600
-Wire Wire Line
-	7400 2300 7400 2600
-Connection ~ 7500 2800
-Wire Wire Line
-	8100 2300 8100 2800
-Connection ~ 8100 2800
-Wire Wire Line
-	5900 4300 5800 4300
-Wire Wire Line
-	5800 4900 5900 4900
-Wire Wire Line
-	6900 3900 7600 3900
-Wire Wire Line
-	6900 4100 7700 4100
-Wire Wire Line
-	6900 4500 7800 4500
-Wire Wire Line
-	6500 5500 6500 5300
-Wire Wire Line
-	6300 5500 6300 5300
-Wire Wire Line
-	6200 5500 6200 5300
-Wire Wire Line
-	5100 2300 5100 4500
-$Comp
-L DCC-Controlled-Kato-Turntable_Library:Conn_DCCNext_01x22 J1
-U 1 1 5F3B9FF5
-P 4800 2100
-F 0 "J1" V 4900 1900 50  0000 C CNN
-F 1 "DCCNext Connector" V 4800 500 50  0000 C CNN
-F 2 "DCC-Controlled-Kato-Turntable:PinHeader_DCCNext_1x22_P2.54mm_Vertical" H 4800 2100 50  0001 C CNN
-F 3 "~" H 4800 2100 50  0001 C CNN
-	1    4800 2100
-	0    1    -1   0   
-$EndComp
-Wire Wire Line
-	4450 4550 4450 4650
-Wire Wire Line
-	4850 4450 4850 4650
-Wire Wire Line
-	4050 5500 4450 5500
-Connection ~ 4050 5500
-Wire Wire Line
-	4050 5350 4050 5500
-Wire Wire Line
-	3650 5500 4050 5500
-Wire Wire Line
-	4850 5350 4850 5500
-Wire Wire Line
-	4850 4950 4850 5050
-$Comp
-L Device:R R1
-U 1 1 5F24F185
-P 4850 5200
-F 0 "R1" H 4920 5246 50  0000 L CNN
-F 1 "1k" H 4920 5155 50  0000 L CNN
-F 2 "Resistor_THT:R_Axial_DIN0207_L6.3mm_D2.5mm_P10.16mm_Horizontal" V 4780 5200 50  0001 C CNN
-F 3 "~" H 4850 5200 50  0001 C CNN
-	1    4850 5200
-	1    0    0    -1  
-$EndComp
-$Comp
-L Device:LED D1
-U 1 1 5F24ECEE
-P 4850 4800
-F 0 "D1" V 4900 4700 50  0000 R CNN
-F 1 "Red" V 4800 4700 50  0000 R CNN
-F 2 "LED_THT:LED_D3.0mm" H 4850 4800 50  0001 C CNN
-F 3 "~" H 4850 4800 50  0001 C CNN
-	1    4850 4800
-	0    -1   -1   0   
-$EndComp
-Wire Wire Line
-	4450 5500 4850 5500
-Connection ~ 4450 5500
-Wire Wire Line
-	4450 5350 4450 5500
-Wire Wire Line
-	3650 5350 3650 5500
-Wire Wire Line
-	4450 4950 4450 5050
-Wire Wire Line
-	4050 4950 4050 5050
-Wire Wire Line
-	3650 4950 3650 5050
-$Comp
-L Device:R R3
-U 1 1 5F2402B4
-P 4050 5200
-F 0 "R3" H 4120 5246 50  0000 L CNN
-F 1 "1k" H 4120 5155 50  0000 L CNN
-F 2 "Resistor_THT:R_Axial_DIN0207_L6.3mm_D2.5mm_P10.16mm_Horizontal" V 3980 5200 50  0001 C CNN
-F 3 "~" H 4050 5200 50  0001 C CNN
-	1    4050 5200
-	1    0    0    -1  
-$EndComp
-$Comp
-L Device:R R4
-U 1 1 5F23FED3
-P 3650 5200
-F 0 "R4" H 3720 5246 50  0000 L CNN
-F 1 "1k" H 3720 5155 50  0000 L CNN
-F 2 "Resistor_THT:R_Axial_DIN0207_L6.3mm_D2.5mm_P10.16mm_Horizontal" V 3580 5200 50  0001 C CNN
-F 3 "~" H 3650 5200 50  0001 C CNN
-	1    3650 5200
-	1    0    0    -1  
-$EndComp
-$Comp
-L Device:R R2
-U 1 1 5F23F470
-P 4450 5200
-F 0 "R2" H 4520 5246 50  0000 L CNN
-F 1 "1k" H 4520 5155 50  0000 L CNN
-F 2 "Resistor_THT:R_Axial_DIN0207_L6.3mm_D2.5mm_P10.16mm_Horizontal" V 4380 5200 50  0001 C CNN
-F 3 "~" H 4450 5200 50  0001 C CNN
-	1    4450 5200
-	1    0    0    -1  
-$EndComp
-$Comp
-L Device:LED D2
-U 1 1 5F236251
-P 4450 4800
-F 0 "D2" V 4500 4700 50  0000 R CNN
-F 1 "Green" V 4400 4700 50  0000 R CNN
-F 2 "LED_THT:LED_D3.0mm" H 4450 4800 50  0001 C CNN
-F 3 "~" H 4450 4800 50  0001 C CNN
-	1    4450 4800
-	0    -1   -1   0   
-$EndComp
-$Comp
-L Device:LED D3
-U 1 1 5F2357DA
-P 4050 4800
-F 0 "D3" V 4100 4700 50  0000 R CNN
-F 1 "Yellow" V 4000 4700 50  0000 R CNN
-F 2 "LED_THT:LED_D3.0mm" H 4050 4800 50  0001 C CNN
-F 3 "~" H 4050 4800 50  0001 C CNN
-	1    4050 4800
-	0    -1   -1   0   
-$EndComp
-$Comp
-L Device:LED D4
-U 1 1 5F234B5D
-P 3650 4800
-F 0 "D4" V 3700 4700 50  0000 R CNN
-F 1 "Blue" V 3600 4700 50  0000 R CNN
-F 2 "LED_THT:LED_D3.0mm" H 3650 4800 50  0001 C CNN
-F 3 "~" H 3650 4800 50  0001 C CNN
-	1    3650 4800
-	0    -1   -1   0   
-$EndComp
-Wire Wire Line
-	5800 2600 7400 2600
-Connection ~ 5800 4300
-Wire Wire Line
-	5800 4300 5800 4900
-$Comp
-L Driver_Motor:L293D U1
-U 1 1 5F1E876E
-P 6400 4500
-F 0 "U1" H 6900 5350 50  0000 C CNN
-F 1 "L293D" H 6950 5250 50  0000 C CNN
-F 2 "Package_DIP:DIP-16_W7.62mm_LongPads" H 6650 3750 50  0001 L CNN
-F 3 "http://www.ti.com/lit/ds/symlink/l293.pdf" H 6100 5200 50  0001 C CNN
-	1    6400 4500
-	1    0    0    -1  
-$EndComp
-Wire Wire Line
-	6500 3400 7400 3400
-Wire Wire Line
-	7400 3400 7400 4200
-Wire Wire Line
-	5800 3400 5800 4300
-Connection ~ 6300 3400
-Connection ~ 6500 3400
-Wire Wire Line
-	5600 2300 5600 3900
-Wire Wire Line
-	9350 4000 9350 4200
-Wire Wire Line
-	4400 4450 4850 4450
-Wire Wire Line
-	4300 2300 4300 4550
-Wire Wire Line
-	4300 4550 4450 4550
-Wire Wire Line
-	4200 2300 4200 4550
-Wire Wire Line
-	4050 4550 4050 4650
-Wire Wire Line
-	4100 2300 4100 4450
-Wire Wire Line
-	4100 4450 3650 4450
-Wire Wire Line
-	3650 4450 3650 4650
-$Comp
-L Connector_Generic:Conn_01x04 J4
-U 1 1 5F4FC801
-P 3000 3100
-F 0 "J4" H 3050 3400 50  0000 R CNN
-F 1 "I2C LCD" H 3050 3300 50  0000 R CNN
-F 2 "Connector_PinHeader_2.54mm:PinHeader_1x04_P2.54mm_Vertical" H 3000 3100 50  0001 C CNN
-F 3 "~" H 3000 3100 50  0001 C CNN
-	1    3000 3100
-	-1   0    0    -1  
-$EndComp
-Wire Wire Line
-	3900 2300 3900 3000
-Wire Wire Line
-	4000 2300 4000 3100
-Wire Wire Line
-	3800 3200 3200 3200
-Wire Wire Line
-	3700 3300 3200 3300
-Text Notes 2900 3350 1    50   ~ 0
-LCD Connector
-Wire Wire Line
-	3700 2300 3700 2800
-Connection ~ 3700 2800
-Wire Wire Line
-	3800 2300 3800 2700
-Connection ~ 3800 2700
-Wire Wire Line
-	3700 2800 7500 2800
-Wire Wire Line
-	3700 2800 3700 3300
-Wire Wire Line
-	3800 2700 3800 3200
-Wire Wire Line
-	3200 3000 3900 3000
-Wire Wire Line
-	3200 3100 4000 3100
-Wire Wire Line
-	4200 4550 4050 4550
-Wire Wire Line
-	5800 3400 5800 2700
-Connection ~ 5800 3400
-Text Notes 3350 3000 0    50   ~ 0
-SCL
-Text Notes 3350 3100 0    50   ~ 0
-SCA
-Text Notes 5100 3100 1    50   ~ 0
-LockM1
-Text Notes 5200 3100 1    50   ~ 0
-LockM2
-Text Notes 5300 3100 1    50   ~ 0
-L2-
-Text Notes 5400 3100 1    50   ~ 0
-L1-
-Text Notes 5500 3100 1    50   ~ 0
-TurnM2
-Text Notes 5600 3100 1    50   ~ 0
-TurnM1
-Text Notes 6300 3300 0    50   ~ 0
-L2-
-Text Notes 6300 3200 0    50   ~ 0
-L1-
-Text Notes 7200 3750 1    50   ~ 0
-L2-
-Text Notes 7300 3750 1    50   ~ 0
-L1-
-Text Notes 7600 3750 1    50   ~ 0
-TurnM1
-Text Notes 7700 3750 1    50   ~ 0
-TurnM2
-Text Notes 7800 3750 1    50   ~ 0
-LockM1
-Text Notes 7900 3750 1    50   ~ 0
-LockM2
-Text Label 3350 3300 0    50   ~ 0
-GND
-Text Label 3350 3200 0    50   ~ 0
-+5V
-Text Label 6200 2800 0    50   ~ 0
-GND
-Text Label 6300 3400 0    50   ~ 0
-+5V
-Text Label 5800 3100 1    50   ~ 0
-+5V
-Text Label 5200 5500 0    50   ~ 0
-GND
-Text Label 7500 3750 1    50   ~ 0
-GND
-Text Label 7400 3750 1    50   ~ 0
-+5V
-Text Label 4100 3100 1    50   ~ 0
-Blue
-Text Label 4200 3100 1    50   ~ 0
-Yellow
-Text Label 4300 3100 1    50   ~ 0
-Green
-Text Label 4400 3100 1    50   ~ 0
-Red
-Text Label 6200 2600 0    50   ~ 0
-Switch
-Wire Wire Line
-	5400 2300 5400 3200
-Wire Wire Line
-	5300 2300 5300 3300
-Wire Wire Line
-	5300 3300 7200 3300
-Wire Wire Line
-	7900 4700 6900 4700
-Wire Wire Line
-	5500 2300 5500 4100
-Wire Wire Line
-	7300 3200 5400 3200
-Wire Wire Line
-	5600 3900 5900 3900
-Wire Wire Line
-	5500 4100 5900 4100
-Wire Wire Line
-	5200 4700 5900 4700
-Wire Wire Line
-	5200 2300 5200 4700
-Wire Wire Line
-	5100 4500 5900 4500
-Wire Wire Line
-	7700 2300 7700 4100
-Wire Wire Line
-	7800 2300 7800 4500
-Wire Wire Line
-	7900 2300 7900 4700
-Wire Wire Line
-	7500 2800 7500 5500
-Wire Wire Line
-	4400 2300 4400 4450
-$Comp
-L Connector_Generic:Conn_01x04 J5
-U 1 1 5F7BA9F7
-P 3000 3900
-F 0 "J5" H 3050 3500 50  0000 R CNN
-F 1 "Switches" H 3050 3600 50  0000 R CNN
-F 2 "Connector_PinHeader_2.54mm:PinHeader_1x04_P2.54mm_Vertical" H 3000 3900 50  0001 C CNN
-F 3 "~" H 3000 3900 50  0001 C CNN
-	1    3000 3900
-	-1   0    0    1   
-$EndComp
-Wire Wire Line
-	3200 4000 3700 4000
-Wire Wire Line
-	3700 4000 3700 3300
-Connection ~ 3700 3300
-Wire Wire Line
-	3200 3900 5000 3900
-Wire Wire Line
-	5000 2600 5700 2600
-Wire Wire Line
-	5700 2600 5700 2300
-Wire Wire Line
-	5000 2300 5000 2500
-Wire Wire Line
-	5000 2500 4900 2500
-Wire Wire Line
-	4900 3800 3200 3800
-Wire Wire Line
-	4900 2300 4900 2400
-Wire Wire Line
-	4900 2400 4800 2400
-Wire Wire Line
-	4800 3700 3200 3700
-Text Label 4550 2800 0    50   ~ 0
-GND
-Text Label 4550 2700 0    50   ~ 0
-+5V
-$Comp
-L Switch:SW_Push SW3
-U 1 1 5F984BCA
-P 2500 3900
-F 0 "SW3" H 2750 3950 50  0000 C CNN
-F 1 "180" H 2150 3950 50  0000 R CNN
-F 2 "DCC-Controlled-Kato-Turntable:SW_Tactile_Straight_7mm" H 2500 4100 50  0001 C CNN
-F 3 "~" H 2500 4100 50  0001 C CNN
-	1    2500 3900
-	1    0    0    -1  
-$EndComp
-Wire Wire Line
-	2300 3700 2250 3700
-Wire Wire Line
-	2250 3700 2250 3800
-Wire Wire Line
-	2250 3800 2300 3800
-Wire Wire Line
-	2250 3800 2250 3900
-Wire Wire Line
-	2250 3900 2300 3900
-Connection ~ 2250 3800
-Wire Wire Line
-	2250 3900 2250 4000
-Connection ~ 2250 3900
-Wire Wire Line
-	3200 3700 2700 3700
-Wire Wire Line
-	3200 3800 2700 3800
-Wire Wire Line
-	3200 3900 2700 3900
-Wire Wire Line
-	2250 4000 3200 4000
-Connection ~ 3200 3800
-Connection ~ 3200 3900
-Connection ~ 3200 3700
-Connection ~ 3200 4000
-Wire Wire Line
-	4800 2400 4800 3700
-Wire Wire Line
-	4900 2500 4900 3800
-Wire Wire Line
-	5000 2600 5000 3900
-Wire Wire Line
-	3800 2700 5800 2700
-$Comp
-L Connector:Screw_Terminal_01x02 J3
-U 1 1 5F21CFB4
-P 8700 2100
-F 0 "J3" V 9050 2050 50  0000 L CNN
-F 1 "DCC" V 8950 2000 50  0000 L CNN
-F 2 "TerminalBlock:TerminalBlock_bornier-2_P5.08mm" H 8700 2100 50  0001 C CNN
-F 3 "~" H 8700 2100 50  0001 C CNN
-	1    8700 2100
-	0    -1   -1   0   
-$EndComp
-$Comp
-L Switch:SW_Push SW2
-U 1 1 5F984375
-P 2500 3800
-F 0 "SW2" H 2750 3850 50  0000 C CNN
-F 1 "RIGHT" H 2200 3850 50  0000 R CNN
-F 2 "DCC-Controlled-Kato-Turntable:SW_Tactile_Straight_7mm" H 2500 4000 50  0001 C CNN
-F 3 "~" H 2500 4000 50  0001 C CNN
-	1    2500 3800
-	1    0    0    -1  
-$EndComp
-$Comp
-L Switch:SW_Push SW1
-U 1 1 5F983E31
-P 2500 3700
-F 0 "SW1" H 2750 3750 50  0000 C CNN
-F 1 "LEFT" H 2150 3750 50  0000 R CNN
-F 2 "DCC-Controlled-Kato-Turntable:SW_Tactile_Straight_7mm" H 2500 3900 50  0001 C CNN
-F 3 "~" H 2500 3900 50  0001 C CNN
-	1    2500 3700
-	1    0    0    -1  
-$EndComp
-Text Notes 7900 2050 1    50   ~ 0
-LockM2
-Text Notes 7800 2050 1    50   ~ 0
-LockM1
-Wire Wire Line
-	7200 3300 7200 5400
-Wire Wire Line
-	8500 5400 8500 5200
-Wire Wire Line
-	8400 5400 8500 5400
-Wire Wire Line
-	8300 5300 8300 5200
-Wire Wire Line
-	8200 5300 8300 5300
-Wire Wire Line
-	8400 5200 8400 5400
-Wire Wire Line
-	8200 5200 8200 5300
-Wire Wire Line
-	9200 4800 9200 5500
-Wire Wire Line
-	8100 4200 8100 4400
-Wire Wire Line
-	9100 4800 9200 4800
-$Comp
-L Transistor_Array:ULN2803A U2
-U 1 1 5F1F80A7
-P 8400 4800
-F 0 "U2" V 8650 4000 50  0000 L CNN
-F 1 "ULN2803A" V 8550 3750 50  0000 L CNN
-F 2 "Package_DIP:DIP-18_W7.62mm_LongPads" H 8450 4150 50  0001 L CNN
-F 3 "http://www.ti.com/lit/ds/symlink/uln2803a.pdf" H 8500 4600 50  0001 C CNN
-	1    8400 4800
-	0    -1   -1   0   
-$EndComp
-Wire Wire Line
-	8900 4350 8900 4400
-Wire Wire Line
-	8800 4350 8800 4400
-Wire Wire Line
-	8700 4350 8700 4400
-Wire Wire Line
-	8600 4350 8600 4400
-Wire Wire Line
-	8600 5250 8600 5200
-Wire Wire Line
-	8700 5250 8700 5200
-Wire Wire Line
-	8800 5250 8800 5200
-Wire Wire Line
-	8900 5250 8900 5200
-NoConn ~ 8600 5250
-NoConn ~ 8700 5250
-NoConn ~ 8800 5250
-NoConn ~ 8900 5250
-Wire Wire Line
-	7400 4200 8100 4200
-Connection ~ 8100 4200
-Wire Wire Line
-	8100 4200 9350 4200
-Wire Wire Line
-	8200 4000 8200 4300
-Wire Wire Line
-	8200 4300 8300 4300
-Wire Wire Line
-	8300 4300 8300 4400
-Connection ~ 8200 4300
-Wire Wire Line
-	8200 4300 8200 4400
-Wire Wire Line
-	8500 4300 8400 4300
-Wire Wire Line
-	8500 4300 8500 4400
-Wire Wire Line
-	8400 4300 8400 4400
-Wire Wire Line
-	8200 5300 7300 5300
-Wire Wire Line
-	7300 3200 7300 5300
-Connection ~ 8200 5300
-Wire Wire Line
-	9200 5500 7500 5500
-Connection ~ 7500 5500
-Wire Wire Line
-	7500 5500 6600 5500
-Wire Wire Line
-	8400 5400 7200 5400
-Connection ~ 8400 5400
-Wire Wire Line
-	8100 2800 8100 3500
-Wire Wire Line
-	8000 2300 8000 2900
-Wire Wire Line
-	8450 3300 8000 3300
-Wire Wire Line
-	8450 3500 8100 3500
-Wire Wire Line
-	8450 4000 8200 4000
-Connection ~ 8400 4300
-Wire Wire Line
-	8400 3900 8400 4300
-Connection ~ 8000 2900
-Wire Wire Line
-	8000 2900 8000 3300
-Wire Wire Line
-	8400 3700 8400 3000
-Wire Wire Line
-	8400 3700 8450 3700
-Wire Wire Line
-	9300 3700 9350 3700
-Wire Wire Line
-	9350 3700 9350 3000
-Wire Wire Line
-	9450 3500 9450 2900
-Wire Wire Line
-	9300 3300 9550 3300
-Wire Wire Line
-	9550 3300 9550 2800
-Connection ~ 9350 4000
-Wire Wire Line
-	9350 3000 8800 3000
-Wire Wire Line
-	9450 2900 8000 2900
-Wire Wire Line
-	9450 3500 9300 3500
-Wire Wire Line
-	9550 2800 8100 2800
-Connection ~ 4850 5500
-Connection ~ 6600 5500
-Wire Wire Line
-	6600 5300 6600 5500
-Wire Wire Line
-	4850 5500 6200 5500
-Connection ~ 6200 5500
-Wire Wire Line
-	6200 5500 6300 5500
-Connection ~ 6300 5500
-Wire Wire Line
-	6300 5500 6500 5500
-Connection ~ 6500 5500
-Wire Wire Line
-	6500 5500 6600 5500
-$EndSCHEMATC
diff --git a/DCCNext-Controlled-Kato-Turntable_v1.48.ino b/DCCNext-Controlled-Kato-Turntable_v1.48.ino
deleted file mode 100644
index ce84f208c8fe1b6951e5ea2692e8cb2ef9b9a29c..0000000000000000000000000000000000000000
--- a/DCCNext-Controlled-Kato-Turntable_v1.48.ino
+++ /dev/null
@@ -1,1495 +0,0 @@
-//-----------------------------------------------------------------------------// DCCNext-Controlled-Kato-Turntable_v1.48
-#include <EEPROM.h>                                                            // Standard Arduino EEPROM library
-#include <DCC_Decoder.h>                                                       // Use Manage Libraries to add: NmraDcc -- https://github.com/MynaBay/DCC_Decoder
-#include <ezButton.h>                                                          // Use Manage Libraries to add: ezButton -- https://github.com/ArduinoGetStarted/button
-#include <LiquidCrystal_I2C.h>                                                 // Use Manage Libraries to add: LiquidCrystal I2C -- https://github.com/johnrickman/LiquidCrystal_I2C
-#define maxSpeed                        100                                    // Speed between -255 = Reversed to 255 = Forward (-5 to +5 VDC)
-#define maxTrack                         36                                    // Total Number of Turntable Tracks
-#define kDCC_INTERRUPT                    0                                    // DCC Interrupt 0
-#define DCC_Address_Offset                1                                    // Default = 1, for Multimaus = 4
-#define DCC_Max_Accessories              13                                    // Total Number of DCC Accessory Decoder Addresses = 225-237
-#define DCC_Interrupt                     2                                    // Arduino Input  Pin  2 = DCC signal = Interrupt 0
-#define Turntable_MotorM1                 5                                    // Arduino Output Pin  5 = Turntable Motor     = Turntable Cable Pin 3
-#define Turntable_MotorM2                 6                                    // Arduino Output Pin  6 = Turntable Motor     = Turntable Cable Pin 4
-#define BridgeRelayL1                     7                                    // Arduino Output Pin  7 = ULN2803A Pin 1+2    = Bridge Relay L1-
-#define BridgeRelayL2                     8                                    // Arduino Output Pin  8 = ULN2803A Pin 3+4    = Bridge Relay L2-
-#define Turntable_LockL2                  9                                    // Arduino Output Pin  9 = Turntable Lock L2   = Turntable Cable Pin 6
-#define Turntable_LockL1                 10                                    // Arduino Output Pin 10 = Turntable Lock L1   = Turntable Cable Pin 5
-#define WatchdogLED                      13                                    // Arduino Output Pin 13 = DCCNext Red LED     = Watchdog Blink
-#define RedLED                           14                                    // Arduino Output Pin 14 = Red LED             = Function Red
-#define GreenLED                         15                                    // Arduino Output Pin 15 = Green LED           = Function Green
-#define YellowLED                        16                                    // Arduino Output Pin 16 = Yellow LED          = Turn 180
-#define Turntable_StatusLED              17                                    // Arduino Output Pin 17 = Blue LED            = Bridge in Position
-                                                                               // Arduino VCC Pin       = Bridge Relay L1+
-                                                                               // Arduino VCC Pin       = Bridge Relay L2+
-                                                                               // Arduino Ground Pin GND                      = Turntable Cable Pin 2
-ezButton Turntable_Switch(3);                                                  // Arduino Input  Pin  3 = Turntable Trigger   = Turntable Cable Pin 1
-ezButton Button_T180(4);                                                       // Arduino Input  Pin  4 = Button Turn 180     = Turn 180
-ezButton Button_Right(11);                                                     // Arduino Input  Pin 11 = Button Turn Right   = Turn 1 Step ClockWise
-ezButton Button_Left(12);                                                      // Arduino Input  Pin 12 = Button Turn Left    = Turn 1 Step Counter ClockWise
-uint32_t Button_T180_PressedTime     =     0;                                  // Button Turn 180 pressed time in ms
-uint32_t Button_T180_ReleasedTime    =     0;                                  // Button Turn 180 released time in ms
-uint32_t Button_T180_PressTime       =     0;                                  // Button Turn 180 press time in ms
-uint32_t Button_T180_ShortPressTime  =  1000;                                  // Button Turn 180 short press time in ms
-uint32_t Button_T180_LongPressTime   =  3000;                                  // Button Turn 180 long press time in ms
-boolean  Button_T180_CurrentState    =  HIGH;                                  // Button Turn 180 current state (Released = HIGH)
-boolean  Button_T180_LastState       =  HIGH;                                  // Button Turn 180 last state (Released = HIGH)
-boolean  Button_T180_IsPressed       = false;                                  // Button Turn 180 pressed
-boolean  Button_T180_IsPressing      = false;                                  // Button Turn 180 pressing
-boolean  Button_T180_ShortPressed    = false;                                  // Button Turn 180 short pressed
-boolean  Button_T180_LongPressed     = false;                                  // Button Turn 180 long pressed
-uint8_t  DCC_Action_LED             =     0;                                   // Pin Number will change by DCC command (pin 14 = Red , 15 = Green, 16 = Blue)
-uint8_t  Turntable_CurrentTrack     =     0;                                   // Turntable Current Track
-uint8_t  Turntable_NewTrack         =     0;                                   // Turntable New Track
-uint8_t  EE_Address                 =     0;                                   // EEPROM Address Turntable Bridge Position
-int      speedValue                 =     0;                                   // Turntable Motor Speed = 0 - 255
-boolean  DCC_ReverseTrack[37];                                                 // Status will change by DCC command (false = Normal, true = Reversed)
-// Note: Size of DCC_ReverseTrack must be maxTrack+1 !!                        // --> [0..maxTrack] = maxTrack+1 records !!                                                                               // Note: Size of DCC_ReverseTrack must be the same as maxTrack !!
-const uint32_t WatchdogInterval     =   250;                                   // Watchdog blink interval in ms
-uint32_t WatchdogMillis             =     0;                                   // Last time Watchdog LED was updated
-boolean  WatchdogState              =   LOW;                                   // Watchdog LED state
-boolean  BridgeRelayActive          = false;                                   // Bridge Relay Not Active
-uint32_t BridgeRelayMaxMillis       =     0;                                   // Bridge Relay Active Timer
-uint32_t BridgeRelayPulsTime        =   250;                                   // Bridge Relay Pulse Time in ms
-uint32_t TurntableLockMillis        =     0;                                   // Turntable Lock Active Timer
-uint32_t TurntableLockInterval      =   500;                                   // Turntable Lock Pulse Time in ms
-boolean  TurntableLockActive        = false;                                   // Turntable Lock Not Active
-uint8_t  Track1                     =     0;                                   // Temp variables
-uint8_t  Track2                     =     0;                                   // Temp variables
-
-const char* Turntable_States[] =                                               // Possible Turntable States
-{//012345678
-  "STOP     ",                                                                 // Stop Turning
-  "POS      ",                                                                 // Bridge in Position
-  "TCW      ",                                                                 // Turn ClockWise
-  "TCCW     ",                                                                 // Turn Counter ClockWise
-  "MCW      ",                                                                 // Motor ClockWise
-  "MCCW     ",                                                                 // Motor Counter ClockWise
-  "DCC_END  ",                                                                 // DCC Command END                           - Button 225: 0 = OFF (Red)
-  "DCC_INPUT",                                                                 // DCC Command INPUT                         - Button 225: 1 = ON  (Green)
-  "DCC_CLEAR",                                                                 // DCC Command CLEAR                         - Button 226: 0 = OFF (Red)
-  "DCC_T180 ",                                                                 // DCC Command Turn 180                      - Button 226: 1 = ON  (Green)
-  "DCC_T1CW ",                                                                 // DCC Command Turn 1 Step ClockWise         - Button 227: 0 = OFF (Red)
-  "DCC_T1CCW",                                                                 // DCC Command Turn 1 Step Counter ClockWise - Button 227: 1 = ON  (Green)
-  "DCC_DCW  ",                                                                 // DCC Command Direction ClockWise           - Button 228: 0 = OFF (Red)
-  "DCC_DCCW ",                                                                 // DCC Command Direction Counter ClockWise   - Button 228: 1 = ON  (Green)
-  "BUT_T180 ",                                                                 // Button T180  = Turn 180
-  "BUT_T1CW ",                                                                 // Button Right = Turn 1 Step ClockWise
-  "BUT_T1CCW",                                                                 // Button Left  = Turn 1 Step Counter ClockWise
-  "BUT_STORE"                                                                  // Button T180  = Store current position as track 1
-}; // END const
-
-enum Turntable_NewActions:uint8_t                                              // Possible Turntable Actions
-{
-  STOP       ,                                                                 // Stop Turning
-  POS        ,                                                                 // Bridge in Position
-  TCW        ,                                                                 // Turn ClockWise
-  TCCW       ,                                                                 // Turn Counter ClockWise
-  MCW        ,                                                                 // Motor ClockWise
-  MCCW       ,                                                                 // Motor Counter ClockWise
-  DCC_END    ,                                                                 // DCC Command END
-  DCC_INPUT  ,                                                                 // DCC Command INPUT
-  DCC_CLEAR  ,                                                                 // DCC Command CLEAR
-  DCC_T180   ,                                                                 // DCC Command Turn 180
-  DCC_T1CW   ,                                                                 // DCC Command Turn 1 Step ClockWise
-  DCC_T1CCW  ,                                                                 // DCC Command Turn 1 Step Counter ClockWise
-  DCC_DCW    ,                                                                 // DCC Command Direction ClockWise
-  DCC_DCCW   ,                                                                 // DCC Command Direction Counter ClockWise
-  BUT_T180   ,                                                                 // Button T180  = Turn 180
-  BUT_T1CW   ,                                                                 // Button Right = Turn 1 Step ClockWise
-  BUT_T1CCW  ,                                                                 // Button Left  = Turn 1 Step Counter ClockWise
-  BUT_STORE                                                                    // Button T180  = Store current position as track 1
-}; // END enum
-
-uint8_t Directions[4][4] =                                                     // ToZone (vertical) - FromZone (
-{
-  { 0, 1, 1, 0 },
-  { 0, 0, 1, 0 },
-  { 0, 0, 0, 1 },
-  { 1, 0, 0, 0 }
-};
-
-enum Turntable_NewActions Turntable_OldAction = STOP;                          // Stores Turntable Previous Action
-enum Turntable_NewActions Turntable_NewAction = STOP;                          // Stores Turntable New Action
-enum Turntable_NewActions Turntable_Action    = STOP;                          // Stores Turntable Requested Action
-
-typedef struct                                                                 // Begin DCC Accessory Structure
-{
-  int               Address;                                                   // DCC Address to respond to
-  uint8_t           Button;                                                    // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  uint8_t           Position1;                                                 // Turntable Position1
-  uint8_t           Position2;                                                 // Turntable Position2
-  uint8_t           OutputPin1;                                                // Arduino Output Pin 1
-  uint8_t           OutputPin2;                                                // Arduino Output Pin 2
-  boolean           ReverseTrack1;                                             // Reverse Track Power: 0 = Normal, 1 = Reversed
-  boolean           ReverseTrack2;                                             // Reverse Track Power: 0 = Normal, 1 = Reversed
-  boolean           Finished;                                                  // Command Busy = 0 or Finished = 1 (Ready for next command)
-  boolean           Active;                                                    // Command Not Active = 0, Active = 1
-  unsigned long     durationMilli;                                             // Pulse Time in ms
-  unsigned long     offMilli;                                                  // For internal use  // Do not change this value
-} // END typedef
-DCC_Accessory_Structure;                                                       // End DCC Accessory Structure
-
-DCC_Accessory_Structure DCC_Accessory[DCC_Max_Accessories];                    // Define DCC_Accessory as DCC Accessory Structure
-LiquidCrystal_I2C lcd(0x27, 20, 4);                                            // I2C Liquid Crystal Display on Address 0x27 with 20 characters by 4 rows
-
-
-//-----------------------------------------------------------------------------//
-void setup()                                                                   // Arduino Setup
-{
-  Serial.begin(115200);
-  Serial.println(F("DCCNext-Controlled-Kato-Turntable_v1.48 -- (c)JMRRvS 2021-01-04"));
-                                                                               // Serial print loaded sketch
-  lcd.init();                                                                  // Initialise LCD
-  lcd.backlight();                                                             // Switch backlight ON
-  lcd.setCursor(0, 0);                                                         // Set cursor to first line and left corner
-  //           01234567890123456789                                            // Sample text
-  lcd.print(F("DCCNext Controlled  "));                                        // LCD print text
-  lcd.setCursor(0, 1);                                                         // Set cursor to second line and left corner
-  //           01234567890123456789                                            // Sample text
-  lcd.print(F("Kato Turntable v1.48"));                                        // LCD print text
-  lcd.setCursor(0, 2);                                                         // Set cursor to third line and left corner
-  //           01234567890123456789                                            // Sample text
-  lcd.print(F("--------------------"));                                        // LCD print text
-  lcd.setCursor(0, 3);                                                         // Set cursor to fourth line and left corner
-  Turntable_Switch.setDebounceTime(10);                                        // Set Debounce Time to 10 milliseconds
-  Button_T180.setDebounceTime(50);                                             // Set Debounce Time to 50 milliseconds
-  Button_Right.setDebounceTime(50);                                            // Set Debounce Time to 50 milliseconds
-  Button_Left.setDebounceTime(50);                                             // Set Debounce Time to 50 milliseconds
-  pinMode(DCC_Interrupt      , INPUT_PULLUP);                                  // Arduino Input Pin   2 = DCC signal = Interrupt 0
-  // pinMode defined with ezButton function                                    // Arduino Input Pin   3 = Turntable Trigger   = Turntable Cable Pin 1
-                                                                               // Arduino Ground Pin GND                      = Turntable Cable Pin 2
-  // pinMode defined with ezButton function                                    // Arduino Input  Pin  4 = Button Turn 180     = Turn 180
-  pinMode(Turntable_MotorM1  , OUTPUT);                                        // Arduino Output Pin  5 = Turntable Motor     = Turntable Cable Pin 3
-  pinMode(Turntable_MotorM2  , OUTPUT);                                        // Arduino Output Pin  6 = Turntable Motor     = Turntable Cable Pin 4
-  pinMode(BridgeRelayL1      , OUTPUT);                                        // Arduino Output Pin  7 = ULN2803A Pin 1+2    = Bridge Relay L1-
-  pinMode(BridgeRelayL2      , OUTPUT);                                        // Arduino Output Pin  8 = ULN2803A Pin 3+4    = Bridge Relay L2-
-  pinMode(Turntable_LockL2   , OUTPUT);                                        // Arduino Output Pin  9 = Turntable Lock L2   = Turntable Cable Pin 6
-  pinMode(Turntable_LockL1   , OUTPUT);                                        // Arduino Output Pin 10 = Turntable Lock L1   = Turntable Cable Pin 5
-  // pinMode defined with ezButton function                                    // Arduino Input  Pin 11 = Button Turn Right   = Turn 1 Step ClockWise
-  // pinMode defined with ezButton function                                    // Arduino Input  Pin 12 = Button Turn Left    = Turn 1 Step Counter ClockWise
-  pinMode(WatchdogLED        , OUTPUT);                                        // Arduino Output Pin 13 = DCCNext Red LED     = Watchdog Blink
-  pinMode(RedLED             , OUTPUT);                                        // Arduino Output Pin 14 = Red LED             = Function Red
-  pinMode(GreenLED           , OUTPUT);                                        // Arduino Output Pin 15 = Green LED           = Function Green
-  pinMode(YellowLED          , OUTPUT);                                        // Arduino Output Pin 16 = Yellow LED          = TURN 180
-  pinMode(Turntable_StatusLED, OUTPUT);                                        // Arduino Output Pin 17 = Blue LED            = Bridge in Position
-  digitalWrite(Turntable_MotorM1, LOW);                                        // Arduino Output Pin  5 = Turntable Motor     = Turntable Cable Pin 3
-  digitalWrite(Turntable_MotorM2, LOW);                                        // Arduino Output Pin  6 = Turntable Motor     = Turntable Cable Pin 4
-  digitalWrite(BridgeRelayL1    , LOW);                                        // Arduino Output Pin  7 = ULN2803A Pin 1+2    = Bridge Relay L1-
-  digitalWrite(BridgeRelayL2    , LOW);                                        // Arduino Output Pin  8 = ULN2803A Pin 3+4    = Bridge Relay L2-
-  digitalWrite(Turntable_LockL2 , LOW);                                        // Arduino Output Pin  9 = Turntable Lock L2   = Turntable Cable Pin 6
-  digitalWrite(Turntable_LockL1 , LOW);                                        // Arduino Output Pin 10 = Turntable Lock L1   = Turntable Cable Pin 5
-
-  DCC.SetBasicAccessoryDecoderPacketHandler(BasicAccDecoderPacket_Handler, true);
-  DCC_Accessory_ConfigureDecoderFunctions();
-  DCC.SetupDecoder( 0x00, 0x00, kDCC_INTERRUPT );
-  for (uint8_t AccDec = 0; AccDec < DCC_Max_Accessories; AccDec++)             // Begin loop through DCC Accessory Decoders
-  {
-    DCC_Accessory[AccDec].Button = 0;                                          // Switch OFF all DCC Accessory Decoders
-  } // END for
-
-  DCC_Action_LED_Startup();                                                    // All DCC Action LEDs ON and OFF  
-  Turntable_CurrentTrack = EEPROM.read(EE_Address);                            // Read Turntable Bridge Position from EEPROM
-  if ((Turntable_CurrentTrack < 1) || (Turntable_CurrentTrack > maxTrack))
-  {
-    Turntable_CurrentTrack = 0;                                                // Reset CurrentTrack if EEPROM value is out of range
-    Turntable_NewTrack = 0;                                                    // Reset NewTrack if EEPROM value is out of range
-    digitalWrite(Turntable_StatusLED, LOW);                                    // Set Arduino Output Pin 17 = Blue LED = Bridge in Position OFF
-  //                  0123456789012345678901234                                // Sample text
-    Serial.println(F("EEPROM status unknown.   "));                            // Serial print Function
-  } // END if
-  else
-  {
-    Turntable_NewTrack = Turntable_CurrentTrack;                               // Set new track to current track
-    digitalWrite(Turntable_StatusLED, HIGH);                                   // Set Arduino Output Pin 17 = Blue LED = Bridge in Position ON
-    BridgeRelayInit();                                                         // Initialize Reverse Tracks
-    BridgeRelayActive = true;                                                  // Activate Bridge Relay Set
-    BridgeRelaySet();                                                          // Set Bride Relay Status = ULN2803A
-  } // END else
-  TurntableLockOff();                                                          // Disable Outputs to L293D
-  //              0123456789012345678901234                                    // Sample text
-  Serial.print(F("Startup_Status       --> "));                                // Serial print Function
-  PrintStatus();                                                               // Print Actions and Track Numbers
-  LCDPrintTrackText();                                                         // LCD print text
-  LCDPrintTrackStatus();                                                       // LCD print text
-} // END setup
-
-
-void BasicAccDecoderPacket_Handler(int address, boolean activate, byte data)
-{
-  address -= 1;
-  address *= 4;
-  address += DCC_Address_Offset;                                               // Default = 1, for Multimaus = 4
-  address += (data & 0x06) >> 1;                                               // Convert NMRA packet address format to human address
-  boolean output = (data & 0x01) ? 1 : 0;                                      // Red = 0, Green = 1
-  for (uint8_t AccDec = 0; AccDec < DCC_Max_Accessories; AccDec++)             // Begin loop through DCC Accessory Decoders
-  {
-    if (address == DCC_Accessory[AccDec].Address)
-    {
-      DCC_Accessory[AccDec].Active = 1;                                        // DCC Accessory Active
-      if (output)
-      {
-        DCC_Accessory[AccDec].Button = 1;                                      // Green Button
-      } // END if
-      else
-      {
-        DCC_Accessory[AccDec].Button = 0;                                      // Red Button
-      } // END else
-    } // END if
-  } // END for
-} // END BasicAccDecoderPacket_Handler
-
-
-void DCC_Accessory_ConfigureDecoderFunctions()
-{
-  DCC_Accessory[0].Address        =   225;                                     // DCC Address 225 0 = END, 1 = INPUT
-  DCC_Accessory[0].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[0].Position1      =     0;                                     // Turntable Position1 - not used in this function
-  DCC_Accessory[0].Position2      =     0;                                     // Turntable Position2 - not used in this function
-  DCC_Accessory[0].OutputPin1     =     0;                                     // Arduino Output Pin xx = LED xx - not used in this function
-  DCC_Accessory[0].OutputPin2     =     0;                                     // Arduino Output Pin xx = LED xx - not used in this function
-  DCC_Accessory[0].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[0].ReverseTrack2  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[0].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[0].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[0].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[1].Address        =   226;                                     // DCC Address 226 0 = CLEAR, 1 = TURN 180
-  DCC_Accessory[1].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[1].Position1      =     0;                                     // Turntable Position1 - not used in this function
-  DCC_Accessory[1].Position2      =     0;                                     // Turntable Position2 - not used in this function
-  DCC_Accessory[1].OutputPin1     =     0;                                     // Arduino Output Pin xx = LED xx - not used in this function
-  DCC_Accessory[1].OutputPin2     =    16;                                     // Arduino Output Pin 16 = Yellow LED
-  DCC_Accessory[1].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[1].ReverseTrack2  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[1].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[1].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[1].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[2].Address        =   227;                                     // DCC Address 227 0 = 1 STEP CW, 1 = 1 STEP CCW
-  DCC_Accessory[2].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[2].Position1      =     0;                                     // Turntable Position1 - not used in this function
-  DCC_Accessory[2].Position2      =     0;                                     // Turntable Position2 - not used in this function
-  DCC_Accessory[2].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[2].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[2].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[2].ReverseTrack2  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[2].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[2].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[2].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[3].Address        =   228;                                     // DCC Address 228 0 = Direction CW, 1 = Direction CCW
-  DCC_Accessory[3].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[3].Position1      =     0;                                     // Turntable Position1 - not used in this function
-  DCC_Accessory[3].Position2      =     0;                                     // Turntable Position1 - not used in this function
-  DCC_Accessory[3].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[3].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[3].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[3].ReverseTrack2  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[3].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[3].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[3].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[4].Address        =   229;                                     // DCC Address 229 0 = Goto Position1 , 1 = Position2
-  DCC_Accessory[4].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[4].Position1      =     1;                                     // Turntable Track 1
-  DCC_Accessory[4].Position2      =     2;                                     // Turntable Track 2
-  DCC_Accessory[4].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[4].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[4].ReverseTrack1  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[4].ReverseTrack2  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[4].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[4].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[4].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[5].Address        =   230;                                     // DCC Address 230 0 = Goto Position1 , 1 = Position2
-  DCC_Accessory[5].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[5].Position1      =     3;                                     // Turntable Track 3
-  DCC_Accessory[5].Position2      =     4;                                     // Turntable Track 4
-  DCC_Accessory[5].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[5].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[5].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[5].ReverseTrack2  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[5].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[5].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[5].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[6].Address        =   231;                                     // DCC Address 231 0 = Goto Position1 , 1 = Position2
-  DCC_Accessory[6].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[6].Position1      =     5;                                     // Turntable Track 5
-  DCC_Accessory[6].Position2      =     6;                                     // Turntable Track 6
-  DCC_Accessory[6].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[6].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[6].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[6].ReverseTrack2  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[6].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[6].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[6].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[7].Address        =   232;                                     // DCC Address 232 0 = Goto Position1 , 1 = Position2
-  DCC_Accessory[7].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[7].Position1      =     7;                                     // Turntable Track 7
-  DCC_Accessory[7].Position2      =     8;                                     // Turntable Track 8
-  DCC_Accessory[7].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[7].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[7].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[7].ReverseTrack2  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[7].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[7].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[7].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[8].Address        =   233;                                     // DCC Address 233 0 = Goto Position1 , 1 = Position2
-  DCC_Accessory[8].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[8].Position1      =     9;                                     // Turntable Track 9
-  DCC_Accessory[8].Position2      =    10;                                     // Turntable Track 10
-  DCC_Accessory[8].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[8].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[8].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[8].ReverseTrack2  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[8].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[8].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[8].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[9].Address        =   234;                                     // DCC Address 234 0 = Goto Position1 , 1 = Position2
-  DCC_Accessory[9].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[9].Position1      =    11;                                     // Turntable Track 11
-  DCC_Accessory[9].Position2      =    12;                                     // Turntable Track 12
-  DCC_Accessory[9].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[9].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[9].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[9].ReverseTrack2  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[9].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[9].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[9].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[10].Address       =   235;                                     // DCC Address 235 0 = Goto Position1 , 1 = Position2
-  DCC_Accessory[10].Button        =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[10].Position1     =    31;                                     // Turntable Track 31
-  DCC_Accessory[10].Position2     =    32;                                     // Turntable Track 32
-  DCC_Accessory[10].OutputPin1    =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[10].OutputPin2    =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[10].ReverseTrack1 =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[10].ReverseTrack2 =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[10].Finished      =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[10].Active        =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[10].durationMilli =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[11].Address       =   236;                                     // DCC Address 236 0 = Goto Position1 , 1 = Position2
-  DCC_Accessory[11].Button        =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[11].Position1     =    33;                                     // Turntable Track 33
-  DCC_Accessory[11].Position2     =    34;                                     // Turntable Track 34
-  DCC_Accessory[11].OutputPin1    =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[11].OutputPin2    =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[11].ReverseTrack1 =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[11].ReverseTrack2 =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[11].Finished      =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[11].Active        =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[11].durationMilli =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[12].Address       =   237;                                     // DCC Address 237 0 = Goto Position1 , 1 = Position2
-  DCC_Accessory[12].Button        =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[12].Position1     =    35;                                     // Turntable Track 35
-  DCC_Accessory[12].Position2     =    36;                                     // Turntable Track 36
-  DCC_Accessory[12].OutputPin1    =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[12].OutputPin2    =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[12].ReverseTrack1 =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[12].ReverseTrack2 =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[12].Finished      =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[12].Active        =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[12].durationMilli =   250;                                     // Pulse Time in ms
-
-} // END DCC_Accessory_ConfigureDecoderFunctions
-
-
-void DCC_Accessory_CheckStatus()
-{
-  for (uint8_t AccDec = 0; AccDec < DCC_Max_Accessories; AccDec++)                 // Begin loop through DCC Accessory Decoders
-  {
-    DCC.loop();                                                                // Loop DCC Library
-    if (DCC_Accessory[AccDec].Finished && DCC_Accessory[AccDec].Active)
-    {
-      DCC_Accessory[AccDec].Finished = 0;
-      DCC_Accessory[AccDec].offMilli = millis() + DCC_Accessory[AccDec].durationMilli;
-      if (DCC_Accessory[AccDec].Address >= 228)
-      {
-//        Serial.println(F("------------------------------------------------------------------------------------------------------------------------------"));
-      } // END if
-      Serial.print(F("Address: "));
-      Serial.print(DCC_Accessory[AccDec].Address);
-      Serial.print(F(", "));
-      Serial.print(F("Button: "));
-      Serial.print(DCC_Accessory[AccDec].Button);
-      Serial.print(F(" ("));
-      Serial.print((DCC_Accessory[AccDec].Button) ? "Green" : "Red");          // 0 = Red, 1 = Green
-      Serial.println(F(")"));
-      switch (DCC_Accessory[AccDec].Address)
-      {
-        case (225):                                                            // DCC Address 225 0 = END, 1 = INPUT
-          if (DCC_Accessory[AccDec].Button == 0)                               // Red Button    : 0 = END
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin1;                 // Set Arduino Output Pin - case 225 0 = END
-            Turntable_NewTrack = Turntable_CurrentTrack;                       // Stop at Current Track
-            Turntable_OldAction = STOP;                                        // Action: Stop Motor
-            Turntable_NewAction = DCC_END;                                     // Action: Stop Motor
-            Turntable_Action = DCC_END;                                        // Requested Action = DCC_END
-          } // END if
-  
-          if (DCC_Accessory[AccDec].Button == 1)                               // Green Button  : 1 = INPUT
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin2;                 // Set Arduino Output Pin - case 225 1 = INPUT
-            Turntable_OldAction = STOP;                                        // Action: Stop Motor
-            Turntable_NewAction = DCC_INPUT;                                   // Action: Stop Motor
-            Turntable_Action = DCC_INPUT;                                      // Requested Action = DCC_INPUT
-          } // END if
-          break; // END case 225
-  
-        case (226):                                                            // DCC Address 226 0 = CLEAR, 1 = TURN 180
-          if (DCC_Accessory[AccDec].Button == 0)                               // Red Button    : 0 = CLEAR
-          {
-            Turntable_CurrentTrack = 1;                                        // Bridge in Home Position
-            Turntable_NewTrack = 1;                                            // Bridge in Home Position
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin1;                 // Set Arduino Output Pin - case 226 0 = CLEAR
-            Turntable_OldAction = Turntable_NewAction;                         // Switch Old Action
-            Turntable_NewAction = DCC_CLEAR;                                   // Action: ???
-            Turntable_Action = DCC_CLEAR;                                      // Requested Action = DCC_CLEAR
-          } // END if
-  
-          if (DCC_Accessory[AccDec].Button == 1)                               // Green Button  : 1 = TURN 180
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin2;                 // Set Arduino Output Pin - case 226 1 = TURN 180
-            if (Turntable_CurrentTrack < 19)
-            {
-              Turntable_NewTrack = Turntable_CurrentTrack + (maxTrack / 2);
-            } // END if
-            else
-            {
-              Turntable_NewTrack = Turntable_CurrentTrack - (maxTrack / 2);
-            } // END else
-            Turntable_OldAction = Turntable_NewAction;                         // Switch Old Action
-            Turntable_NewAction = DCC_T180;                                    // Action: Turn Motor (maxTrack / 2) Steps
-            Turntable_Action = DCC_T180;                                       // Requested Action = DCC_T180
-          } // END if
-          break; // END case 226
-  
-        case (227):                                                            // DCC Address 227 0 = 1 STEP CW, 1 = 1 STEP CCW
-          if (DCC_Accessory[AccDec].Button == 0)                               // Red Button   : 0 = Turn 1 Step ClockWise
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin1;                 // Set Arduino Output Pin - case 227 0 = 1 STEP CW
-            Turntable_NewTrack = Turntable_CurrentTrack + 1;
-            if (Turntable_NewTrack > maxTrack)                                 // From Track 36 to Track 1
-            {
-              Turntable_NewTrack = 1;                                          // Track (1)
-            } // END if
-            Turntable_OldAction = Turntable_NewAction;                         // Switch Old Action
-            Turntable_NewAction = DCC_T1CW;                                    // Action: Turn Motor 1 Step ClockWise
-            Turntable_Action = DCC_T1CW;                                       // Requested Action = DCC_T1CW
-          } // END if
-  
-          if (DCC_Accessory[AccDec].Button == 1)                               // Green Button : 1 = Turn 1 Step Counter ClockWise
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin2;                 // Set Arduino Output Pin - case 227 1 = 1 STEP CCW
-            Turntable_NewTrack = Turntable_CurrentTrack - 1;
-            if (Turntable_NewTrack == 0)                                       // From Track 1 to Track 36
-            {
-              Turntable_NewTrack = maxTrack;                                   // Track (maxTrack)
-            } // END if
-            Turntable_OldAction = Turntable_NewAction;                         // Switch Old Action
-            Turntable_NewAction = DCC_T1CCW;                                   // Action: Turn Motor 1 Step Counter ClockWise
-            Turntable_Action = DCC_T1CCW;                                      // Requested Action = DCC_T1CCW
-          } // END if
-          break; // END case 227
-  
-        case (228):                                                            // DCC Address 228 0 = Direction CW, 1 = Direction CCW
-          if (DCC_Accessory[AccDec].Button == 0)                               // Red Button   : 0 = Direction CW
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin1;                 // Set Arduino Output Pin - case 228 0 = Direction CW
-            Turntable_OldAction = Turntable_NewAction;                         // Switch Old Action
-            Turntable_NewAction = DCC_DCW;                                     // Action: Motor Direction ClockWise
-            Turntable_Action = DCC_DCW;                                        // Requested Action = DCC_DCW
-          } // END if
-  
-          if (DCC_Accessory[AccDec].Button == 1)                               // Green Button : 1 = Direction CCW 0 = Direction CW
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin2;                 // Set Arduino Output Pin - case 228 1 = Direction CCW
-            Turntable_OldAction = Turntable_NewAction;                         // Switch Old Action
-            Turntable_NewAction = DCC_DCCW;                                    // Action: Motor Direction Counter ClockWise
-            Turntable_Action = DCC_DCCW;                                       // Requested Action = DCC_DCCW
-          } // END if
-          break; // END case 228
-  
-        default:                                                               // DCC Address 229 to DCC_Max_Accessories
-          if (DCC_Accessory[AccDec].Button == 0)                               // Red Button   : 0 = Goto Track Position1
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin1;                 // Set Arduino Output Pin - case default 0 = Red
-            Turntable_NewTrack = DCC_Accessory[AccDec].Position1;              // Set New Turntable Track from DCC Address
-            Turntable_OldAction = Turntable_NewAction;                         // Switch Old Action
-            SetDirection();                                                    // Determine Direction ClockWise or Counter ClockWise
-            Turntable_Action = Turntable_NewAction;                            // Requested Action = Depends on SetDirection
-          } // END if
-  
-          if (DCC_Accessory[AccDec].Button == 1)                               // Green Button : 1 = Goto Track Position2
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin2;                 // Set Arduino Output Pin - case default 1 = Green
-            Turntable_NewTrack = DCC_Accessory[AccDec].Position2;              // Set New Turntable Track from DCC Address
-            Turntable_OldAction = Turntable_NewAction;                         // Switch Old Action
-            SetDirection();                                                    // Determine Direction ClockWise or Counter ClockWise
-            Turntable_Action = Turntable_NewAction;                            // Requested Action = Depends on SetDirection
-          } // END if
-          break; // END default
-  
-      } // END switch
-
-  //                  0123456789012345678901234                                // Sample text
-      Serial.print(F("DCC_ACC_Status       --> "));                            // Serial print Function
-      PrintStatus();                                                           // Print Actions and Track Numbers
-      Serial.println(F("------------------------------------------------------------------------------------------------------------------------------"));
-      LCDPrintTrackStatus();                                                   // LCD print text
-    } // END if
-    
-    if ((!DCC_Accessory[AccDec].Finished) && (millis() > DCC_Accessory[AccDec].offMilli))
-    {
-      DCC_Accessory[AccDec].Finished = 1;
-      DCC_Accessory[AccDec].Active = 0;
-    } // END if
-  } // END for                                                                 // End loop through DCC Accessory Decoders
-} // END DCC_Accessory_CheckStatus
-
-
-void Button_CheckStatus()
-{
-  Button_T180.loop();                                                          // Check debounce and update the state of the button
-  Button_Right.loop();                                                         // Check debounce and update the state of the button
-  Button_Left.loop();                                                          // Check debounce and update the state of the button
-  Button_T180_CurrentState = Button_T180.getState();                           // HIGH = Released, LOW = Pressed
-  if (Button_T180_LastState == HIGH && Button_T180_CurrentState == LOW)        // LOW = Pressed
-  {
-    Button_T180_IsPressed = true;
-    Button_T180_IsPressing = true;
-    Button_T180_ShortPressed = false;
-    Button_T180_LongPressed = false;
-    Button_T180_PressedTime = millis();
-//    Serial.println();
-//    Serial.print("Button_T180_PressedTime: ");
-//    Serial.println(Button_T180_PressedTime);
-  } // END if
-  else if (Button_T180_LastState == LOW && Button_T180_CurrentState == HIGH)   // HIGH = Released
-  {
-    Button_T180_IsPressing = false;
-    Button_T180_ReleasedTime = millis();
-    Button_T180_PressTime = Button_T180_ReleasedTime - Button_T180_PressedTime;
-    if (Button_T180_PressTime < Button_T180_ShortPressTime)
-    {
-      Button_T180_ShortPressed = true;
-    } // END if
-    else if (Button_T180_LongPressed)
-    {
-//      Serial.println("Button Released.");
-      Button_T180_LongPressed = false;
-    } // END else if
-  } // END else if
-  if (Button_T180_IsPressing && !Button_T180_LongPressed)
-  {
-    Button_T180_PressTime = millis() - Button_T180_PressedTime;
-    if (Button_T180_PressTime >= Button_T180_LongPressTime)
-    {
-      Button_T180_LongPressed = true;
-    }
-  }
-  if (Button_T180_ShortPressed)                                                // Button T180 Pressed : TURN 180
-  {
-    Button_T180_ShortPressed = false;
-    DCC_Action_LED = 16;                                                       // Set Arduino Output Pin 16 = Yellow LED
-    if (Turntable_CurrentTrack <= (maxTrack / 2))
-    {
-      Turntable_NewTrack = Turntable_CurrentTrack + (maxTrack / 2);
-    } // END if
-    else
-    {
-      Turntable_NewTrack = Turntable_CurrentTrack - (maxTrack / 2);
-    } // END else
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = BUT_T180;                                            // Action: Turn Motor (maxTrack / 2) Steps
-    Turntable_Action = BUT_T180;                                               // Requested Action = BUT_T180
-    Serial.println();                                                          // Serial print Function
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("ShortPressTime: "));                                       // Serial print Function
-    Serial.print(Button_T180_PressTime);                                       // Serial print Function
-    if (Button_T180_PressTime < 100)
-    {
-      Serial.print(F("   --> "));                                              // Serial print Function
-    } // END if
-    else if (Button_T180_PressTime < 1000)
-    {
-      Serial.print(F("  --> "));                                               // Serial print Function
-    } // END if
-    else
-    {
-      Serial.print(F(" --> "));                                                // Serial print Function
-    } // END if
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  }
-  if (Button_T180_IsPressed && Button_T180_LongPressed)                        // Button T180 Long Pressed : Store current position as track 1
-  {
-    Button_T180_IsPressed = false;
-    DCC_Action_LED = 16;                                                       // Set Arduino Output Pin 16 = Yellow LED
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = BUT_STORE;                                           // Action: Store current position as track 1
-    Turntable_Action = BUT_STORE;                                              // Requested Action = BUT_STORE
-    Serial.println();                                                          // Serial print Function
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("LongPressTime: "));                                        // Serial print Function
-    Serial.print(Button_T180_PressTime);                                       // Serial print Function
-    Serial.print(F("  --> "));                                                 // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  }
-  Button_T180_LastState = Button_T180_CurrentState;
-  
-  if (Button_Right.isPressed())                                                // Button Right Pressed : Turn 1 Step ClockWise
-  {
-    DCC_Action_LED = 14;                                                       // Set Arduino Output Pin 14 = Red LED
-    Turntable_NewTrack = Turntable_CurrentTrack + 1;
-    if (Turntable_NewTrack > maxTrack)                                         // From Track 36 to Track 1
-    {
-      Turntable_NewTrack = 1;                                                  // Track (1)
-    } // END if
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = BUT_T1CW;                                            // Action: Turn Motor 1 Step ClockWise
-    Turntable_Action = BUT_T1CW;                                               // Requested Action = BUT_T1CW
-  //                0123456789012345678901234                                  // Sample text
-    Serial.println();
-    Serial.print(F("BUT_T1CW Status      --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-
-  if (Button_Left.isPressed())                                                 // Button Left Pressed: Turn 1 Step Counter ClockWise
-  {
-    DCC_Action_LED = 15;                                                       // Set Arduino Output Pin 15 = Green LED
-    Turntable_NewTrack = Turntable_CurrentTrack - 1;
-    if (Turntable_NewTrack == 0)                                               // From Track 1 to Track 36
-    {
-      Turntable_NewTrack = maxTrack;                                           // Track (maxTrack)
-    } // END if
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = BUT_T1CCW;                                           // Action: Turn Motor 1 Step Counter ClockWise
-    Turntable_Action = BUT_T1CCW;                                              // Requested Action = BUT_T1CCW
-  //                0123456789012345678901234                                  // Sample text
-    Serial.println();
-    Serial.print(F("BUT_T1CCW Status     --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-} // END Button_CheckStatus
-
-
-void Turntable_CheckSwitch()                                                   // From HIGH to LOW = Bridge in Position
-{
-  Turntable_Switch.loop();                                                     // Check debounce and update the state of the Turntable Switch
-  if (Turntable_Switch.isPressed())                                            // Bridge in Position
-  {
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = POS;                                                 // Bridge in Position
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("TT_CheckSwitch       --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-} // END Turntable_CheckSwitch
-
-
-void Turntable_StoreTrack()                                                    // Store Track Position in EEPROM
-{
-  digitalWrite(Turntable_StatusLED, HIGH);                                     // Set Arduino Onboard LED 17 = Blue LED = Bridge in Position ON
-  digitalWrite(DCC_Action_LED     , LOW);                                      // LED OFF
-  EEPROM.update(EE_Address, Turntable_CurrentTrack);                           // Store Turntable bridge position into EEPROM
-  Serial.print(F("Track "));                                                   // Serial print Function
-  Serial.print(Turntable_CurrentTrack);                                        // Serial print Function
-  Serial.print(F(" stored at EEPROM address "));                               // Serial print Function
-  Serial.println(EE_Address);                                                  // Serial print Function
-} // END Turntable_StoreTrack
-
-
-void Turntable_CheckPos()                                                      // Check if Bridge on wanted track position
-{
-  if (Turntable_CurrentTrack == Turntable_NewTrack)                            // Bridge in Position = Stop Motor
-  {
-    switch (Turntable_OldAction)                                               // Check OldAction
-    {
-      case MCW:                                                                // Turntable turning ClockWise
-        speedValue = 0;                                                        // Zero = Direction Stop - MCW
-        Turntable_SetMotorSpeed(speedValue);                                   // Motor Stop - MCW
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = STOP;                                            // Action: STOP
-  //                    0123456789012345678901234                              // Sample text
-        Serial.print(F("TT_CheckPos MCW      --> "));                          // Serial print Function
-        PrintStatus();                                                         // Print Actions and Track Numbers
-        break; // END case MCW
-        
-      case MCCW:                                                               // Turntable turning Counter ClockWise
-        speedValue = 0;                                                        // Zero = Direction Stop - MCCW
-        Turntable_SetMotorSpeed(speedValue);                                   // Motor Stop - MCCW
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = STOP;                                            // Set New Action: STOP
-  //                    0123456789012345678901234                              // Sample text
-        Serial.print(F("TT_CheckPos MCCW     --> "));                          // Serial print Function
-        PrintStatus();                                                         // Print Actions and Track Numbers
-        break; // END case MCCW
-        
-      default:                                                                 // None of the above
-  //                    0123456789012345678901234                              // Sample text
-        Serial.print(F("TT_CheckPos "));                                       // Serial print Function
-        Serial.print(Turntable_OldAction);                                     // Print OldAction
-        Serial.print(F(" --> "));                                              // Serial print Function
-        PrintStatus();                                                         // Print Actions and Track Numbers
-        break; // END default
-
-    } // END switch
-  } // END if
-  else                                                                         // Bridge NOT in Position = Don't Stop Motor
-  {
-    switch (Turntable_OldAction)                                               // Check OldAction
-    {
-      case MCW:                                                                // Turntable turning ClockWise
-        digitalWrite(Turntable_StatusLED, LOW);                                // Set Arduino Onboard LED 17 = Blue LED = Bridge in Position OFF
-        digitalWrite(DCC_Action_LED  , HIGH);                                  // Set DCC Action LED ON
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = MCW;                                             // Action: MCW
-  //                    0123456789012345678901234                              // Sample text
-        Serial.print(F("TT_CheckPos MCW      --> "));                          // Serial print Function
-        PrintStatus();                                                         // Print Actions and Track Numbers
-        break; // END case MCW
-        
-      case MCCW:                                                               // Turntable turning Counter ClockWise
-        digitalWrite(Turntable_StatusLED, LOW);                                // Set Arduino Onboard LED 17 = Blue LED = Bridge in Position OFF
-        digitalWrite(DCC_Action_LED  , HIGH);                                  // Set DCC Action LED ON
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = MCCW;                                            // Set New Action: MCCW
-  //                    0123456789012345678901234                              // Sample text
-        Serial.print(F("TT_CheckPos MCCW     --> "));                          // Serial print Function
-        PrintStatus();                                                         // Print Actions and Track Numbers
-        break; // END case MCCW
-        
-      default:                                                                 // None of the above
-  //                    0123456789012345678901234                              // Sample text
-        Serial.print(F("TT_CheckPos "));                                       // Serial print Function
-        Serial.print(Turntable_OldAction);                                     // Print OldAction
-        Serial.print(F(" --> "));                                              // Serial print Function
-        PrintStatus();                                                         // Print Actions and Track Numbers
-        break; // END default
-        
-    } // END switch
-  } // END else
-} // END Turntable_CheckPos
-
-
-void DCC_Accessory_LED_OFF()                                                   // All LEDs OFF
-{
-  for (uint8_t AccDec = 0; AccDec < DCC_Max_Accessories; AccDec++)
-  {
-    digitalWrite(DCC_Accessory[AccDec].OutputPin1, LOW);                       // LED OFF
-    digitalWrite(DCC_Accessory[AccDec].OutputPin2, LOW);                       // LED OFF
-  } // END for
-} // END DCC_Accessory_LED_OFF
-
-
-void DCC_Action_LED_Startup()                                                  // All DCC Action LEDs ON and OFF
-{
-  for (int DCC_Action_LED = 14; DCC_Action_LED <= 17; DCC_Action_LED++)        // Loop DCC Action LED
-  {                                                                            // Short LED test at startup
-    digitalWrite(DCC_Action_LED, HIGH);                                        // Switch LED ON
-    delay(200);                                                                // LED ON for 200 msec
-    digitalWrite(DCC_Action_LED, LOW);                                         // Switch LED OFF
-  } // END for
-} // END DCC_Action_LED_Startup
-
-
-void Turntable_Init()                                                          // Start Initialize Turntable Procedure
-{
-  digitalWrite(Turntable_StatusLED, LOW);                                      // Set Arduino Onboard LED 17 = Blue LED = Bridge in Position OFF
-  digitalWrite(DCC_Action_LED, HIGH);                                          // Set DCC Action LED ON
-} // END Turntable_Init
-
-
-void Turntable_Clear()                                                         // Simple Blink Action to comfirm DCC_CLEAR
-{
-  digitalWrite(DCC_Action_LED, LOW);                                           // Set DCC Action LED OFF
-  delay(200);
-  digitalWrite(DCC_Action_LED, HIGH);                                          // Set DCC Action LED ON
-  delay(200);
-  digitalWrite(DCC_Action_LED, LOW);                                           // Set DCC Action LED OFF
-  delay(200);
-  digitalWrite(DCC_Action_LED, HIGH);                                          // Set DCC Action LED ON
-  delay(200);
-  digitalWrite(DCC_Action_LED, LOW);                                           // Set DCC Action LED OFF
-  delay(1000);
-  digitalWrite(DCC_Action_LED, HIGH);                                          // Set DCC Action LED ON
-} // END Turntable_Clear
-
-
-void Turntable_End()                                                           // End Initialize Turntable Procedure
-{
-  digitalWrite(Turntable_StatusLED, LOW);                                      // Set Arduino Output Pin 17 = Blue LED = Bridge in Position OFF
-  digitalWrite(DCC_Action_LED, LOW);                                           // Set DCC Action LED OFF
-} // END Turntable_End
-
-void BridgeRelayInit()                                                         //  Initialize Reverse Tracks
-{
-  Serial.println(F("Initialize Reverse Tracks (0 = Normal, 1 = Reversed)"));
-  for (uint8_t AccDec = 4; AccDec < DCC_Max_Accessories; AccDec++)             // DCC Accessory Decoders 0..3 are special functions. Start at #4
-  {                                                                            // Configure Reverse Track (false = Normal, true = Reversed)
-    Track1 = DCC_Accessory[AccDec].Position1;
-    DCC_ReverseTrack[Track1] = DCC_Accessory[AccDec].ReverseTrack1;            // Set Reverse Track Status (false = Normal, true = Reversed)
-    Serial.print(F("Track "));
-    if (Track1 < 10)
-    {
-    Serial.print(F(" "));
-    }
-    Serial.print(Track1);
-    Serial.print(F(": "));
-    Serial.print(DCC_ReverseTrack[Track1]);
-    Serial.print(F(",  Track "));
-    if (Track1 <= 18)
-    {
-      DCC_ReverseTrack[Track1 + 18] = !DCC_Accessory[AccDec].ReverseTrack1;    // Set Reverse Track Status (false = Normal, true = Reversed)
-      Serial.print(Track1 + 18);
-      Serial.print(F(": "));
-      Serial.print(DCC_ReverseTrack[Track1 + 18]);
-    } // END if
-    else
-    {
-      DCC_ReverseTrack[Track1 - 18] = !DCC_Accessory[AccDec].ReverseTrack1;    // Set Reverse Track Status (false = Normal, true = Reversed)
-      Serial.print(Track1 - 18);
-      Serial.print(F(": "));
-      Serial.print(DCC_ReverseTrack[Track1 - 18]);
-    } // END else
-    Serial.println();
-
-    Track2 = DCC_Accessory[AccDec].Position2;
-    DCC_ReverseTrack[Track2] = DCC_Accessory[AccDec].ReverseTrack2;            // Set Reverse Track Status (false = Normal, true = Reversed)
-    Serial.print(F("Track "));
-    if (Track2 < 10)
-    {
-    Serial.print(F(" "));
-    }
-    Serial.print(Track2);
-    Serial.print(F(": "));
-    Serial.print(DCC_ReverseTrack[Track2]);
-    Serial.print(F(",  Track "));
-    if (Track2 <= 18)
-    {
-      DCC_ReverseTrack[Track2 + 18] = !DCC_Accessory[AccDec].ReverseTrack2;    // Set Reverse Track Status (false = Normal, true = Reversed)
-      Serial.print(Track2 + 18);
-      Serial.print(F(": "));
-      Serial.print(DCC_ReverseTrack[Track2 + 18]);
-    } // END if
-    else
-    {
-      DCC_ReverseTrack[Track2 - 18] = !DCC_Accessory[AccDec].ReverseTrack2;    // Set Reverse Track Status (false = Normal, true = Reversed)
-      Serial.print(Track2 - 18);
-      Serial.print(F(": "));
-      Serial.print(DCC_ReverseTrack[Track2 - 18]);
-    } // END else
-    Serial.println();
-  } // END for
-} // END BridgeRelayInit()
-
-
-void BridgeRelayCheck()                                                        // Check Bride Relay Status = ULN2803A
-{
-  if ((BridgeRelayActive) && (millis() > BridgeRelayMaxMillis))                // Check Bridge Relay Active Timer
-  {
-    BridgeRelayActive = false;                                                 // Deactivate Bridge Relay Set
-    BridgeRelayOff();                                                          // Disable Outputs to ULN2803A
-  } // END if
-  
-} // END BridgeRelayCheck
-
-
-void BridgeRelaySet()                                                          // Set Bride Relay Status = ULN2803A
-{
-  if (BridgeRelayActive)                                                       // Check if Bridge Relay Set is active
-  {
-    switch (DCC_ReverseTrack[Turntable_CurrentTrack])
-    {
-      case (false):
-        BridgeRelayOnNormal();                                                 // Enable Outputs to ULN2803A - Normal
-        break; // END case false
-      case (true):
-        BridgeRelayOnReversed();                                               // Enable Outputs to ULN2803A - Reversed
-        break; // END case true
-    } // END switch
-  } // END if
-} // END BridgeRelaySet
-
-void BridgeRelayOff()                                                          // Disable Outputs to ULN2803A
-{
-  digitalWrite(BridgeRelayL1, LOW);                                            // Arduino Output Pin 7 OFF = ULN2803A Pin 1+2       = Bridge Relay L1-
-  digitalWrite(BridgeRelayL2, LOW);                                            // Arduino Output Pin 8 OFF = ULN2803A Pin 3+4       = Bridge Relay L2-
-  Serial.println(F("Bridge Relay: Off     "));                                 // Serial print Function
-} // END BridgeRelayOff
-
-
-void BridgeRelayOnNormal()                                                     // Enable Outputs to ULN2803A - Normal
-{
-  digitalWrite(BridgeRelayL1, HIGH);                                           // Arduino Output Pin 7 ON  = ULN2803A Pin 1+2       = Bridge Relay L1-
-  digitalWrite(BridgeRelayL2, LOW);                                            // Arduino Output Pin 8 OFF = ULN2803A Pin 3+4       = Bridge Relay L2-
-  //              0123456789012345678901234                                    // Sample text
-  Serial.println(F("Bridge Relay: Normal     "));                              // Serial print Function
-} // END BridgeRelayOnNormal
-
-
-void BridgeRelayOnReversed()                                                   // Enable Outputs to ULN2803A - Reversed
-{
-  digitalWrite(BridgeRelayL1, LOW);                                            // Arduino Output Pin 7 OFF = ULN2803A Pin 1+2       = Bridge Relay L1-
-  digitalWrite(BridgeRelayL2, HIGH);                                           // Arduino Output Pin 8 ON  = ULN2803A Pin 3+4       = Bridge Relay L2-
-  //              0123456789012345678901234                                    // Sample text
-  Serial.println(F("Bridge Relay: Reversed   "));                              // Serial print Function
-} // END BridgeRelayOnReversed
-
-
-void Turntable_SetMotorSpeed(int speed)                                        // Set Motor Speed
-{
-  DCC_Action_LED_Reset();                                                      // DCC_Action_LED OFF
-  digitalWrite(DCC_Action_LED  , HIGH);                                        // LED ON
-  switch (speed)
-  {
-    case (0):                                                                  // Motor Stop
-      digitalWrite(Turntable_MotorM1, LOW);                                    // Output T.M1 L293D OFF
-      digitalWrite(Turntable_MotorM2, LOW);                                    // Output T.M2 L293D OFF
-      BridgeRelayMaxMillis = 0;                                                // Reset Bridge Relay Active Timer
-      BridgeRelayActive = false;                                               // Deactivate Bridge Relay Set
-      TurntableLockSetLock();                                                  // Enable Outputs to L293D - Lock Active
-      break; // END case 0
-    case (maxSpeed):                                                           // Motor Forward
-      TurntableLockResetLock();                                                // Enable Outputs to L293D - Lock Free
-      digitalWrite(Turntable_MotorM2, LOW);                                    // Output T.M2 L293D OFF
-      analogWrite(Turntable_MotorM1, speed);                                   // PWM on T.M1 L293D
-      BridgeRelayMaxMillis = millis() + BridgeRelayPulsTime;                   // Set Bridge Relay Active Timer
-      BridgeRelayActive = true;                                                // Activate Bridge Relay Set
-      break; // END case maxSpeed
-    case (-maxSpeed):                                                          // Motor Reverse
-      TurntableLockResetLock();                                                // Enable Outputs to L293D - Lock Free
-      digitalWrite(Turntable_MotorM1, LOW);                                    // Output T.M1 L293D OFF
-      analogWrite(Turntable_MotorM2, -speed);                                  // PWM on T.M2 L293D
-      BridgeRelayMaxMillis = millis() + BridgeRelayPulsTime;                   // Set Bridge Relay Active Timer
-      BridgeRelayActive = true;                                                // Activate Bridge Relay Set
-      break; // END case -maxSpeed
-  } // END switch
-//LCDPrintTrackText();                                                         // LCD print text
-  LCDPrintTrackStatus();                                                       // LCD print text
-} // END Turntable_SetMotorSpeed
-
-
-void GetDirection()                                                            // Determine Direction based on Zones
-{
-  uint8_t FromZone, ToZone;
-  FromZone = GetZone( Turntable_CurrentTrack - 1 );
-  ToZone = GetZone( Turntable_NewTrack - 1);
-  Serial.print(F("From Zone: "));                                              // Serial print Function
-  Serial.println(FromZone);
-  Serial.print(F("To Zone: "));                                                // Serial print Function
-  Serial.println(ToZone);
-
-  //     FromZone
-  //    0  1  2  3
-// T    |  |  |  |
-// o 0-{0, 1, 1, 0}
-// Z 1-{0, 0, 1, 0}
-// o 2-{0, 0, 0, 1}
-// n 3-{1, 0, 0, 0}
-// e
-
-  if ( ToZone != FromZone )                                                    // Only when FromZone not the same as ToZone
-  {
-    if ( Directions[ToZone][FromZone] )                                        // Directions matrix contains 1 = CCW
-    {
-      Serial.println(F("Directions CCW"));                                     // Serial print Function
-      Turntable_NewAction = TCCW;                                              // Action: Turn Motor M1 Counter ClockWise
-      speedValue = -maxSpeed;                                                  // Negative = Direction Counter ClockWise
-    } // END if
-    else
-    {
-      Serial.println(F("Directions CW"));                                      // Serial print Function
-      Turntable_NewAction = TCW;                                               // Action: Turn Motor M1 ClockWise
-      speedValue = maxSpeed;                                                   // Positive = Direction ClockWise
-    } // END else
-  } // END if
-  else                                                                         // FromZone same as ToZone
-  {
-    if ( Turntable_NewTrack < Turntable_CurrentTrack )
-    {
-      Serial.println(F("In Zone CCW"));                                        // Serial print Function
-      Turntable_NewAction = TCCW;                                              // Action: Turn Motor M1 Counter ClockWise
-      speedValue = -maxSpeed;                                                  // Negative = Direction Counter ClockWise
-    } // END if
-    else
-    {
-      Serial.println(F("In Zone CW"));                                         // Serial print Function
-      Turntable_NewAction = TCW;                                               // Action: Turn Motor M1 ClockWise
-      speedValue = maxSpeed;                                                   // Positive = Direction ClockWise
-    } // END else
-  } // END else
-} // END GetDirection
-
-
-void SetDirection()                                                            // Set Direction based Action or Zones
-{
-  if (Turntable_NewTrack == Turntable_CurrentTrack)                            // Check Current Track
-  {
-    Turntable_NewAction = STOP;                                                // Action: STOP
-    speedValue = 0;                                                            // Zero = Direction Stop - Stop
-  } // END if
-  else if (Turntable_OldAction == DCC_DCW)                                     // Check Old Action
-  {
-    Turntable_NewAction = TCW;                                                 // Action: Turn Motor ClockWise
-    speedValue = maxSpeed;                                                     // Positive = Direction ClockWise - TCW
-  } // END else if
-  else if (Turntable_OldAction == DCC_DCCW)                                    // Check Old Action
-  {
-    Turntable_NewAction = TCCW;                                                // Action: Turn Motor Counter ClockWise
-    speedValue = -maxSpeed;                                                    // Negative = Direction Counter ClockWise - TCCW
-  } // END else if
-  else                                                                         // Old Action unknown (probably STOP)
-  {
-    GetDirection();                                                            // Determine Direction based on Zones
-  } // END else
-  Serial.print(F("SetDirection         --> "));                                // Serial print Function
-  PrintStatus();                                                               // Print Actions and Track Numbers
-} // END SetDirection
-
-
-uint8_t GetZone(uint8_t Track )                                                // Detemine Zone from Track
-{
-  uint8_t Zone;
-  if      ( Track >=  0               && Track < (1*(maxTrack/4)) )            // Zone 0 = From  0 to  8 = Track  1 to 9
-  {
-    Zone = 0;
-  } // END if
-  else if ( Track >= (1*(maxTrack/4)) && Track < (2*(maxTrack/4)) )            // Zone 1 = From  9 to 17 = Track 10 to 18
-  {
-    Zone = 1;
-  } // END else if
-  else if ( Track >= (2*(maxTrack/4)) && Track < (3*(maxTrack/4)) )            // Zone 2 = From 18 to 26 = Track 19 to 27
-  {
-    Zone = 2;
-  } // END else if
-  else                                                                         // Zone 3 = From 27 to 35 = Track 28 to 36
-  {
-    Zone = 3;
-  } // END else
-  return Zone;
-} // END GetZone
-
-
-void DCC_Action_LED_Reset()                                                    // DCC Action LEDs OFF
-{
-  for (int ledpin = 14; ledpin <= 17; ledpin++)                                // Loop ledpin
-  {
-    digitalWrite(ledpin, LOW);                                                 // Switch LED OFF
-  } // END for
-}
-
-void PrintStatus()                                                             // Serial print status
-{
-  Serial.print(Turntable_States[Turntable_Action]);                            // Serial print action
-  Serial.print(F(": Old: "));                                                  // Serial print text
-  Serial.print(Turntable_States[Turntable_OldAction]);                         // Serial print action
-  Serial.print(F(", New: "));                                                  // Serial print text
-  Serial.print(Turntable_States[Turntable_NewAction]);                         // Serial print action
-  Serial.print(F(", Current: "));                                              // Serial print text
-  if (Turntable_CurrentTrack < 10)
-  {
-    Serial.print(F(" "));                                                      // Serial print text
-  }
-  Serial.print(Turntable_CurrentTrack);                                        // Serial print value
-  Serial.print(F(", NewTrack: "));                                             // Serial print text
-  if (Turntable_NewTrack < 10)
-  {
-    Serial.print(F(" "));                                                      // Serial print text
-  }
-  Serial.print(Turntable_NewTrack);                                            // Serial print value
-  Serial.print(F(", DCC_Action_LED: "));                                       // Serial print text
-  if (DCC_Action_LED < 10)
-  {
-    Serial.print(F(" "));                                                      // Serial print text
-  }
-  Serial.print(DCC_Action_LED);                                                // Serial print value
-  Serial.print(F(", Speed: "));                                                // Serial print text
-  if (speedValue == 0)
-  {
-    Serial.print(F("   "));                                                    // Serial print text
-  }
-  if (speedValue > 0)
-  {
-    Serial.print(F(" "));                                                      // Serial print text
-  }
-  Serial.print(speedValue);                                                    // Serial print value
-  Serial.println();                                                            // Serial print new line
-} // END PrintStatus
-
-
-void LCDPrintTrackStatus()
-{
-  //           01234567890123456789                                            // Sample text
-//lcd.print(F("Track: .. to .. #..."));                                        // LCD print text
-  if (Turntable_CurrentTrack < 10)
-  {
-    lcd.setCursor(7, 3);                                                       // Set cursor to first line and 8th character
-    lcd.print(F(" "));                                                         // LCD print text
-  //lcd.setCursor(8, 3);                                                       // Set cursor to first line and 9th character
-  } // END if
-  else
-  {
-    lcd.setCursor(7, 3);                                                       // Set cursor to first line and 8th character
-  } // END else
-  lcd.print(Turntable_CurrentTrack);                                           // LCD print value
-  if (Turntable_NewTrack < 10)
-  {
-    lcd.setCursor(13, 3);                                                      // Set cursor to first line and 14th character
-    lcd.print(F(" "));                                                         // LCD print text
-  //lcd.setCursor(14, 3);                                                      // Set cursor to first line and 15th character
-  } // END if
-  else
-  {
-    lcd.setCursor(13, 3);                                                      // Set cursor to first line and 14th character
-  } // END else
-  lcd.print(Turntable_NewTrack);                                               // LCD print value
-  lcd.setCursor(16, 3);                                                        // Set cursor to first line and 17th character
-  if (speedValue == 0)
-  {
-    lcd.print(F("-  "));                                                       // LCD print text
-  } // END if
-  if (speedValue < 0)
-  {
-    lcd.print(F("<"));                                                         // LCD print text
-  } // END if
-  if (speedValue > 0)
-  {
-    lcd.print(F(">"));                                                         // LCD print text
-  } // END if
-  lcd.setCursor(17, 3);                                                        // Set cursor to first line and 18th character
-  if (abs(speedValue) < 100)
-  {
-    lcd.setCursor(18, 3);                                                      // Set cursor to first line and 19th character
-  } // END if
-  if (abs(speedValue) < 10)
-  {
-    lcd.setCursor(19, 3);                                                      // Set cursor to first line and 20th character
-  } // END if
-  lcd.print(abs(speedValue));                                                  // LCD print value
-} // END LCDPrintTrackStatus
-
-
-void LCDPrintTrackText()                                                       // LCD print text
-{
-  lcd.setCursor(0, 3);                                                         // Set cursor to fourth line and left corner
-  //           01234567890123456789                                            // Sample text
-  lcd.print(F("Track:    to        "));                                        // LCD print text
-} // END LCDPrintTrackText
-
-
-void LCDPrintAction()
-{
-  lcd.setCursor(10, 1);                                                        // Set cursor to second line and 10th character
-  lcd.print(Turntable_States[Turntable_Action]);                               // LCD print action
-  lcd.setCursor(10, 3);                                                        // Set cursor to fourth line and 10th character
-  lcd.print(Turntable_States[Turntable_NewAction]);                            // LCD print text
-
-  lcd.setCursor(0, 3);                                                         // Set cursor to fourth line and left corner
-  lcd.print(Turntable_States[Turntable_OldAction]);                            // LCD print text
-  lcd.setCursor(10, 3);                                                        // Set cursor to fourth line and 10th character
-  lcd.print(Turntable_States[Turntable_NewAction]);                            // LCD print text
-} // END LCDPrintAction
-
-
-void LCDPrintClear()
-{
-  lcd.setCursor(0, 0);                                                         // Set cursor to first line and left corner
-  //           01234567890123456789                                            // Sample text
-  lcd.print(F("                    "));                                        // Clear text
-  lcd.setCursor(0, 1);                                                         // Set cursor to second line and left corner
-  //           01234567890123456789                                            // Sample text
-  lcd.print(F("                    "));                                        // Clear text
-  lcd.setCursor(0, 2);                                                         // Set cursor to third line and left corner
-  //           01234567890123456789                                            // Sample text
-  lcd.print(F("                    "));                                        // Clear text
-  lcd.setCursor(0, 3);                                                         // Set cursor to fourth line and left corner
-  //           01234567890123456789                                            // Sample text
-  lcd.print(F("                    "));                                        // Clear text
-}
-
-
-void TurntableLockCheck()                                                      // Check Turntable Lock Status
-{
-  if ((TurntableLockActive) && (millis() > TurntableLockMillis))               // Check  Turntable Lock Active Timer
-  {
-    TurntableLockActive = false;                                               // Deactivate Turntable Lock
-    TurntableLockOff();                                                        // Disable Outputs to L293D
-  } // END if
-  
-} // END TurntableLockCheck
-
-
-void TurntableLockOff()                                                        // Disable Outputs to L293D
-{
-  TurntableLockActive = false;
-  digitalWrite(Turntable_LockL1, LOW);                                         // Arduino Output Pin 10 = Turntable Lock L1   = Turntable Cable Pin 5
-  digitalWrite(Turntable_LockL2, LOW);                                         // Arduino Output Pin  9 = Turntable Lock L2   = Turntable Cable Pin 6
-  Serial.println(F("Turntable Lock Off"));                                     // Serial print Function
-  Serial.println(F("------------------------------------------------------------------------------------------------------------------------------"));
-} // END TurntableLockOff
-
-
-void TurntableLockResetLock()                                                  // Enable Outputs to L293D - Lock Free
-{
-  digitalWrite(Turntable_LockL1, HIGH);                                        // Arduino Output Pin 10 = Turntable Lock L1   = Turntable Cable Pin 5
-  digitalWrite(Turntable_LockL2, LOW);                                         // Arduino Output Pin  9 = Turntable Lock L2   = Turntable Cable Pin 6
-  TurntableLockMillis = millis() + TurntableLockInterval;                      // Set Turntable Lock Active Timer
-  TurntableLockActive = true;
-  Serial.println(F("Turntable Lock Free"));                                    // Serial print Function
-} // END TurntableLockFree
-
-
-void TurntableLockSetLock()                                                    // Enable Outputs to L293D - Lock Active
-{
-  digitalWrite(Turntable_LockL1, LOW);                                         // Arduino Output Pin 10 = Turntable Lock L1   = Turntable Cable Pin 5
-  digitalWrite(Turntable_LockL2, HIGH);                                        // Arduino Output Pin  9 = Turntable Lock L2   = Turntable Cable Pin 6
-  Serial.println(F("Turntable Lock Active"));                                  // Serial print Function
-  TurntableLockMillis = millis() + TurntableLockInterval;                      // Set Turntable Lock Active Timer
-  TurntableLockActive = true;
-} // END TurntableLockLocked
-
-
-//-----------------------------------------------------------------------------//
-void loop()                                                                    // Arduino Main Program
-{
-  unsigned long currentMillis = millis();
-  if ( currentMillis - WatchdogMillis >= WatchdogInterval )
-  {
-    WatchdogMillis = currentMillis;
-    WatchdogState = !WatchdogState;
-    digitalWrite(WatchdogLED, WatchdogState);
-  }
-  DCC_Accessory_CheckStatus();                                                 // Check DCC Accessory Status
-  Button_CheckStatus();                                                        // Check Button Status
-  Turntable_CheckSwitch();                                                     // Check Kato Turntable Pin 1
-  BridgeRelayCheck();                                                          // Check Bride Relay Status = ULN2803A
-  TurntableLockCheck();                                                        // Check Turntable Lock Status
-  if ((Turntable_OldAction == STOP) && (Turntable_NewAction == DCC_INPUT))
-  {
-    Turntable_Init();                                                          // Action: Initialize Turntable
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = DCC_INPUT;                                           // Action: Initialize Turntable
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)DCC_INPUT         -> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-
-  if ((Turntable_OldAction == STOP) && (Turntable_NewAction == DCC_CLEAR))
-  {
-    Turntable_Clear();                                                         // Action: Set Turntable Track to 1
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = DCC_CLEAR;                                           // Action: Set Turntable Track to 1
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)DCC_CLEAR        --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-
-  if ((Turntable_OldAction == STOP) && (Turntable_NewAction == DCC_END))
-  {
-    Turntable_End();                                                           // End all actions
-    Turntable_OldAction = STOP;                                                // 
-    Turntable_NewAction = STOP;                                                // 
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)DCC_END          --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-
-  if ((Turntable_OldAction != DCC_T180) && (Turntable_NewAction == DCC_T180))
-  {
-    if ((Turntable_CurrentTrack >= 1) && (Turntable_CurrentTrack <= 18))
-    {
-      speedValue = maxSpeed;                                                   // Positive = Direction ClockWise - DCC_T180
-      Turntable_SetMotorSpeed(speedValue);                                     // Motor Forward - DCC_T180
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-      Turntable_NewAction = MCW;                                               // Action: Move Motor ClockWise
-    } // END if
-    else
-    {
-      speedValue = -maxSpeed;                                                  // Negative = Direction Counter ClockWise - DCC_T180
-      Turntable_SetMotorSpeed(speedValue);                                     // Motor Backward - DCC_T180
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-      Turntable_NewAction = MCCW;                                              // Action: Move Motor Counter ClockWise
-    } // END else
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)DCC_T180         --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-
-  if ((Turntable_OldAction != DCC_T1CW) && (Turntable_NewAction == DCC_T1CW))
-  {
-    speedValue = maxSpeed;                                                     // Positive = Direction ClockWise - DCC_T1CW
-    Turntable_SetMotorSpeed(speedValue);                                       // Motor Forward - DCC_T1CW
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = MCW;                                                 // Action: Move Motor ClockWise
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)Check T1CW       --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-
-  if ((Turntable_OldAction != DCC_T1CCW) && (Turntable_NewAction == DCC_T1CCW))
-  {
-    speedValue = -maxSpeed;                                                    // Negative = Direction Counter ClockWise - DCC_T1CCW
-    Turntable_SetMotorSpeed(speedValue);                                       // Motor Reverse - DCC_T1CCW
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = MCCW;                                                // Action: Move Motor Counter ClockWise
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)Check T1CCW      --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-
-  if ((Turntable_OldAction != BUT_STORE) && (Turntable_NewAction == BUT_STORE))
-  {
-    Turntable_CurrentTrack = 1;                                                // Bridge in Home Position
-    Turntable_NewTrack = 1;                                                    // Bridge in Home Position
-    DCC_Action_LED_Startup();                                                  // All DCC Action LEDs ON and OFF
-    Turntable_StoreTrack();                                                    // Store Track Position in EEPROM
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = STOP;
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)BUT_STORE        --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-    LCDPrintTrackStatus();                                                     // LCD print text
-  } // END if
-
-  if ((Turntable_OldAction != BUT_T180) && (Turntable_NewAction == BUT_T180))
-  {
-    if ((Turntable_CurrentTrack >= 1) && (Turntable_CurrentTrack <= 18))
-    {
-      speedValue = maxSpeed;                                                   // Positive = Direction ClockWise - BUT_T180
-      Turntable_SetMotorSpeed(speedValue);                                     // Motor Forward - BUT_T180
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-      Turntable_NewAction = MCW;                                               // Action: Move Motor ClockWise
-    } // END if
-    else
-    {
-      speedValue = -maxSpeed;                                                  // Negative = Direction Counter ClockWise - BUT_T180
-      Turntable_SetMotorSpeed(speedValue);                                     // Motor Backward - BUT_T180
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-      Turntable_NewAction = MCCW;                                              // Action: Move Motor Counter ClockWise
-    } // END else
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)BUT_T180         --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-
-  if ((Turntable_OldAction != BUT_T1CW) && (Turntable_NewAction == BUT_T1CW))
-  {
-    speedValue = maxSpeed;                                                     // Positive = Direction ClockWise - BUT_T1CW
-    Turntable_SetMotorSpeed(speedValue);                                       // Motor Forward - BUT_T1CW
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = MCW;                                                 // Action: Move Motor ClockWise
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)BUT_T1CW         --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-
-  if ((Turntable_OldAction != BUT_T1CCW) && (Turntable_NewAction == BUT_T1CCW))
-  {
-    speedValue = -maxSpeed;                                                    // Negative = Direction Counter ClockWise - BUT_T1CCW
-    Turntable_SetMotorSpeed(speedValue);                                       // Motor Reverse - BUT_T1CCW
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = MCCW;                                                // Action: Move Motor Counter ClockWise
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)BUT_T1CCW        --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-
-  if ((Turntable_OldAction != TCW) && (Turntable_NewAction == TCW))
-  {
-    speedValue = maxSpeed;                                                     // Positive = Direction ClockWise - TCW
-    Turntable_SetMotorSpeed(speedValue);                                       // Motor Forward - TCW
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = MCW;                                                 // Action: Move Motor ClockWise
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)Check TCW        --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-
-  if ((Turntable_OldAction != TCCW) && (Turntable_NewAction == TCCW))
-  {
-    speedValue = -maxSpeed;                                                    // Negative = Direction Counter ClockWise - TCCW
-    Turntable_SetMotorSpeed(speedValue);                                       // Motor Reverse - TCCW
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = MCCW;                                                // Action: Move Motor Counter ClockWise
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)Check TCCW       --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-
-  if ((Turntable_OldAction == MCW) && (Turntable_NewAction == POS))            // Move ClockWise and Turntable in Position
-  {
-    Turntable_CurrentTrack = Turntable_CurrentTrack + 1;
-    if (Turntable_CurrentTrack > maxTrack)                                     // From Track 36 to Track 1
-    {
-      Turntable_CurrentTrack = 1;                                              // Track (1)
-    } // END if
-    Turntable_CheckPos();                                                      // Check if Bridge on wanted track position
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)T+1 - Check MCW  --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-    LCDPrintTrackStatus();                                                     // LCD print text
-  } // END if
-
-  if ((Turntable_OldAction == MCCW) && (Turntable_NewAction == POS))           // Move Counter ClockWise and Turntable in Position
-  {
-    Turntable_CurrentTrack = Turntable_CurrentTrack - 1;
-    if (Turntable_CurrentTrack == 0)                                           // From Track 1 to Track 36
-    {
-      Turntable_CurrentTrack = maxTrack;                                       // Track (maxTrack)
-    } // END if
-    Turntable_CheckPos();                                                      // Check if Bridge in Position
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)T-1 - Check MCCW --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-    LCDPrintTrackStatus();                                                     // LCD print text
-  } // END if
-
-  if ((Turntable_OldAction == DCC_DCW) && (Turntable_NewAction == POS))        // Move ClockWise and Turntable in Position
-  {
-    Turntable_CurrentTrack = Turntable_CurrentTrack + 1;
-    if (Turntable_CurrentTrack > maxTrack)                                     // From Track 36 to Track 1
-    {
-      Turntable_CurrentTrack = 1;                                              // Track (1)
-    } // END if
-    Turntable_CheckPos();                                                      // Check if Bridge in Position
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)T+1 - Check DCW  --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-    LCDPrintTrackStatus();                                                     // LCD print text
-  } // END if
-  
-  if ((Turntable_OldAction == DCC_DCCW) && (Turntable_NewAction == POS))       // Move Counter ClockWise and Turntable in Position
-  {
-    Turntable_CurrentTrack = Turntable_CurrentTrack - 1;
-    if (Turntable_CurrentTrack == 0)                                           // From Track 1 to Track 36
-    {
-      Turntable_CurrentTrack = maxTrack;                                       // Track (maxTrack)
-    } // END if
-    Turntable_CheckPos();                                                      // Check if Bridge in Position
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)T-1 - Check DCCW --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-    LCDPrintTrackStatus();                                                     // LCD print text
-  } // END if
-  
-  if ((Turntable_OldAction == POS) && (Turntable_NewAction == STOP))           // STOP
-  {
-    Turntable_StoreTrack();                                                    // Store Track Position in EEPROM
-    BridgeRelayActive = true;                                                  // Activate Bridge Relay Set
-    BridgeRelaySet();                                                          // Set Bride Relay Status = ULN2803A
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = STOP;                                                // Action: STOP
-  //                0123456789012345678901234                                  // Sample text
-    Serial.print(F("(..)STOP             --> "));                              // Serial print Function
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-} // END loop
-//-----------------------------------------------------------------------------//
diff --git a/DCCNext-Controlled-Kato-Turntable_v2.07.ino b/DCCNext-Controlled-Kato-Turntable_v2.07.ino
deleted file mode 100644
index 664f0032c765d08fe6c2666dcba3d7f7638990b1..0000000000000000000000000000000000000000
--- a/DCCNext-Controlled-Kato-Turntable_v2.07.ino
+++ /dev/null
@@ -1,1636 +0,0 @@
-//-----------------------------------------------------------------------------// DCCNext-Controlled-Kato-Turntable_v2.07
-// Sketch uses 16034 bytes (49%) of program storage space. Maximum is 32256 bytes.
-// Global variables use 1566 bytes (76%) of dynamic memory, leaving 482 bytes for local variables. Maximum is 2048 bytes.
-// Low memory available, stability problems may occur.
-//-----------------------------------------------------------------------------//
-// The programmed tracks 1-36, correspond to adresses 401 to 436.
-// Red = Bridge hut end of turntable will rotate to selected track.
-// Green = Opposite bridge hut end will rotate to selected track.
-// Address 400 = 180° bridge rotation, Red = Clockwise (CW), Green = Counter Clockwise (CCW).
-#include <EEPROM.h>                                                            // Standard Arduino EEPROM library
-#include <DCC_Decoder.h>                                                       // Use Manage Libraries to add: NmraDcc -- https://github.com/MynaBay/DCC_Decoder
-#include <ezButton.h>                                                          // Use Manage Libraries to add: ezButton -- https://github.com/ArduinoGetStarted/button
-#include <LiquidCrystal_I2C.h>                                                 // Use Manage Libraries to add: LiquidCrystal I2C -- https://github.com/johnrickman/LiquidCrystal_I2C
-#define kDCC_INTERRUPT                            0                            // DCC Interrupt 0
-#define DCC_Address_Offset                        1                            // Default = 1, for Multimaus = 4
-#define DCC_Max_Accessories                      19                            // Total Number of DCC Accessory Decoder 0..18 = Addresses = 400 - 436
-#define DCC_Interrupt                             2                            // Arduino Input  Pin  2 = DCC signal = Interrupt 0
-const uint8_t  Turntable_MotorM1            =     5;                           // Arduino Output Pin  5 = Turntable Motor     = Turntable Cable Pin 3
-const uint8_t  Turntable_MotorM2            =     6;                           // Arduino Output Pin  6 = Turntable Motor     = Turntable Cable Pin 4
-const uint8_t  BridgeRelayL1                =     7;                           // Arduino Output Pin  7 = ULN2803A Pin 1+2    = Bridge Relay L1-
-const uint8_t  BridgeRelayL2                =     8;                           // Arduino Output Pin  8 = ULN2803A Pin 3+4    = Bridge Relay L2-
-const uint8_t  Turntable_LockL2             =     9;                           // Arduino Output Pin  9 = Turntable Lock L2   = Turntable Cable Pin 6
-const uint8_t  Turntable_LockL1             =    10;                           // Arduino Output Pin 10 = Turntable Lock L1   = Turntable Cable Pin 5
-const uint8_t  WatchdogLED                  =    13;                           // Arduino Output Pin 13 = DCCNext Red LED     = Watchdog Blink
-const uint8_t  RedLED                       =    14;                           // Arduino Output Pin 14 = Red LED             = Function Red
-const uint8_t  GreenLED                     =    15;                           // Arduino Output Pin 15 = Green LED           = Function Green
-const uint8_t  YellowLED                    =    16;                           // Arduino Output Pin 16 = Yellow LED          = Turn 180
-const uint8_t  Turntable_StatusLED          =    17;                           // Arduino Output Pin 17 = Blue LED            = Bridge in Position
-                                                                               // Arduino VCC Pin       = Bridge Relay L1+
-                                                                               // Arduino VCC Pin       = Bridge Relay L2+
-                                                                               // Arduino Ground Pin GND                      = Turntable Cable Pin 2
-ezButton       Turntable_Switch(3);                                            // Arduino Input  Pin  3 = Turntable Trigger   = Turntable Cable Pin 1
-ezButton       Button_T180(4);                                                 // Arduino Input  Pin  4 = Button Turn 180     = Turn 180
-ezButton       Button_Right(11);                                               // Arduino Input  Pin 11 = Button Turn Right   = Turn 1 Step ClockWise
-ezButton       Button_Left(12);                                                // Arduino Input  Pin 12 = Button Turn Left    = Turn 1 Step Counter ClockWise
-const uint32_t Turntable_SwitchDebounceTime =    30;                           // Turntable Switch debounce time in ms
-const uint32_t Button_T180DebounceTime      =    50;                           // Button T180 debounce time in ms
-const uint32_t Button_RightDebounceTime     =    50;                           // Button Right debounce time in ms
-const uint32_t Button_LeftDebounceTime      =    50;                           // Button Left debounce time in ms
-uint32_t       Button_T180_PressedTime      =     0;                           // Button T180 pressed time in ms
-uint32_t       Button_T180_ReleasedTime     =     0;                           // Button T180 released time in ms
-uint32_t       Button_T180_PressTime        =     0;                           // Button T180 press time in ms
-const uint32_t Button_T180_ShortPressTime   =  1000;                           // Button T180 short press time in ms
-const uint32_t Button_T180_LongPressTime    =  3000;                           // Button T180 long press time in ms
-boolean        Button_T180_CurrentState     =  HIGH;                           // Button T180 current state (Released = HIGH)
-boolean        Button_T180_LastState        =  HIGH;                           // Button T180 last state (Released = HIGH)
-boolean        Button_T180_IsPressed        = false;                           // Button T180 pressed
-boolean        Button_T180_IsPressing       = false;                           // Button T180 pressing
-boolean        Button_T180_ShortPressed     = false;                           // Button T180 short pressed
-boolean        Button_T180_LongPressed      = false;                           // Button T180 long pressed
-uint32_t       Button_Right_PressedTime     =     0;                           // Button Right pressed time in ms
-uint32_t       Button_Right_ReleasedTime    =     0;                           // Button Right released time in ms
-uint32_t       Button_Right_PressTime       =     0;                           // Button Right press time in ms
-const uint32_t Button_Right_ShortPressTime  =  1000;                           // Button Right short press time in ms
-const uint32_t Button_Right_LongPressTime   =  3000;                           // Button Right long press time in ms
-boolean        Button_Right_CurrentState    =  HIGH;                           // Button Right current state (Released = HIGH)
-boolean        Button_Right_LastState       =  HIGH;                           // Button Right last state (Released = HIGH)
-boolean        Button_Right_IsPressed       = false;                           // Button Right pressed
-boolean        Button_Right_IsPressing      = false;                           // Button Right pressing
-boolean        Button_Right_ShortPressed    = false;                           // Button Right short pressed
-boolean        Button_Right_LongPressed     = false;                           // Button Right long pressed
-uint32_t       Button_Left_PressedTime      =     0;                           // Button Left pressed time in ms
-uint32_t       Button_Left_ReleasedTime     =     0;                           // Button Left released time in ms
-uint32_t       Button_Left_PressTime        =     0;                           // Button Left press time in ms
-const uint32_t Button_Left_ShortPressTime   =  1000;                           // Button Left short press time in ms
-const uint32_t Button_Left_LongPressTime    =  3000;                           // Button Left long press time in ms
-boolean        Button_Left_CurrentState     =  HIGH;                           // Button Left current state (Released = HIGH)
-boolean        Button_Left_LastState        =  HIGH;                           // Button Left last state (Released = HIGH)
-boolean        Button_Left_IsPressed        = false;                           // Button Left pressed
-boolean        Button_Left_IsPressing       = false;                           // Button Left pressing
-boolean        Button_Left_ShortPressed     = false;                           // Button Left short pressed
-boolean        Button_Left_LongPressed      = false;                           // Button Left long pressed
-uint8_t        DCC_Action_LED               =     0;                           // Pin Number will change by DCC command (pin 14 = Red , 15 = Green, 16 = Blue)
-uint8_t        Turntable_CurrentTrack       =     0;                           // Turntable Current Track
-uint8_t        Turntable_NewTrack           =     0;                           // Turntable New Track
-const uint8_t  EE_Address                   =     0;                           // EEPROM Address Turntable Bridge Position
-int            speedValue                   =     0;                           // Turntable Motor Speed = maxSpeed or -maxSpeed
-const uint8_t  maxSpeed                     =   100;                           // Speed between -255 = Reversed to 255 = Forward (-5 to +5 VDC)
-const uint8_t  maxTrack                     =    36;                           // Total number of turntable tracks
-boolean        DCC_ReverseTrack[37];                                           // Status will change by DCC command (false = Normal, true = Reversed) 
-// Note: Size of DCC_ReverseTrack must be maxTrack + 1 !!                      // --> [0..maxTrack] = maxTrack + 1 records !!                                                                               // Note: Size of DCC_ReverseTrack must be the same as maxTrack !!
-const uint32_t WatchdogInterval             =   250;                           // Watchdog blink interval in ms
-uint32_t       WatchdogMillis               =     0;                           // Last time Watchdog LED was updated
-uint8_t        WatchdogCounter              =     0;                           // Watchdog Counter
-boolean        WatchdogState                =   LOW;                           // Watchdog LED state
-boolean        BridgeRelayActive            = false;                           // Bridge Relay Not Active
-uint32_t       BridgeRelayMaxMillis         =     0;                           // Bridge Relay Active Timer
-const uint32_t BridgeRelayPulsTime          =   250;                           // Bridge Relay Pulse Time in ms
-uint32_t       TurntableLockMillis          =     0;                           // Turntable Lock Active Timer
-const uint32_t TurntableLockInterval        =   500;                           // Turntable Lock Pulse Time in ms
-boolean        TurntableLockActive          = false;                           // Turntable Lock Not Active
-uint32_t       TurntableWaitMillis          =     0;                           // Turntable Wait Before Turn Active Timer
-const uint32_t TurntableWaitInterval        =  2000;                           // Turntable Wait Before Turn Time in ms
-boolean        TurntableWaitActive          = false;                           // Turntable Wait Before Turn Not Active
-uint8_t        Track1                       =     0;                           // Temp variables
-uint8_t        Track2                       =     0;                           // Temp variables
-
-const char* Turntable_States[] =                                               // Possible Turntable States
-{//012345678
-  "POS      ",                                                                 // Bridge in Position
-  "STOP     ",                                                                 // Stop Turning
-  "UNLOCKING",                                                                 // Unlocking Turntable Lock
-  "UNLOCKED ",                                                                 // Turntable Lock Unlocked
-  "TURN_WAIT",                                                                 // Turntable Wait Before Turn
-  "SETDIR   ",                                                                 // Set Direction
-  "TCW      ",                                                                 // Turn ClockWise
-  "TCCW     ",                                                                 // Turn Counter ClockWise
-  "MCW      ",                                                                 // Motor ClockWise
-  "MCCW     ",                                                                 // Motor Counter ClockWise
-  "DCC_END  ",                                                                 // DCC Command END                           - Button 225: 0 = OFF (Red)
-  "DCC_INPUT",                                                                 // DCC Command INPUT                         - Button 225: 1 = ON  (Green)
-  "DCC_CLEAR",                                                                 // DCC Command CLEAR                         - Button 226: 0 = OFF (Red)
-  "DCC_TURN ",                                                                 // DCC Command Turn                          - Button 401..436
-  "DCC_T180 ",                                                                 // DCC Command Turn 180                      - Button 226: 1 = ON  (Green)
-  "BUT_T180 ",                                                                 // Button T180  (Shortpress) = Turn 180
-  "BUT_STORE",                                                                 // Button T180  (Longpress)  = Store current position as track 1
-  "BUT_T1CW ",                                                                 // Button Right (Shortpress) = Turn 1 Step ClockWise
-  "BUT_RLOCK",                                                                 // Button Right (Longpress)  = Reset Turntable Lock
-  "BUT_T1CCW",                                                                 // Button Left  (Shortpress) = Turn 1 Step Counter ClockWise
-  "BUT_SLOCK"                                                                  // Button Left  (Longpress)  = Set Turntable Lock
-}; // END const
-
-enum Turntable_NewActions:uint8_t                                              // Possible Turntable Actions
-{
-  POS       ,                                                                  // Bridge in Position
-  STOP      ,                                                                  // Stop Turning
-  UNLOCKING ,                                                                  // Unlocking Turntable Lock
-  UNLOCKED  ,                                                                  // Turntable Lock Unlocked
-  TURN_WAIT ,                                                                  // Turntable Wait Before Turn
-  SETDIR    ,                                                                  // Set Direction
-  TCW       ,                                                                  // Turn ClockWise
-  TCCW      ,                                                                  // Turn Counter ClockWise
-  MCW       ,                                                                  // Motor ClockWise
-  MCCW      ,                                                                  // Motor Counter ClockWise
-  DCC_END   ,                                                                  // DCC Command END
-  DCC_INPUT ,                                                                  // DCC Command INPUT
-  DCC_CLEAR ,                                                                  // DCC Command CLEAR
-  DCC_TURN  ,                                                                  // DCC Command Turn
-  DCC_T180  ,                                                                  // DCC Command Turn 180
-  BUT_T180  ,                                                                  // Button T180  (Shortpress) = Turn 180
-  BUT_STORE ,                                                                  // Button T180  (Longpress)  = Store current position as track 1
-  BUT_T1CW  ,                                                                  // Button Right (Shortpress) = Turn 1 Step ClockWise
-  BUT_RLOCK ,                                                                  // Button Right (Longpress)  = Reset Turntable Lock
-  BUT_T1CCW ,                                                                  // Button Left  (Shortpress) = Turn 1 Step Counter ClockWise
-  BUT_SLOCK                                                                    // Button Left  (Longpress)  = Set Turntable Lock
-}; // END enum
-
-uint8_t Directions[4][4] =                                                     // ToZone (vertical) - FromZone (
-{
-  { 0, 1, 1, 0 },
-  { 0, 0, 1, 0 },
-  { 0, 0, 0, 1 },
-  { 1, 0, 0, 0 }
-};
-
-enum Turntable_NewActions Turntable_OldAction = STOP;                          // Stores Turntable Previous Action
-enum Turntable_NewActions Turntable_NewAction = STOP;                          // Stores Turntable New Action
-enum Turntable_NewActions Turntable_Action    = STOP;                          // Stores Turntable Requested Action
-
-typedef struct                                                                 // Begin DCC Accessory Structure
-{
-  int               Address;                                                   // DCC Address to respond to
-  uint8_t           Button;                                                    // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  uint8_t           Position1;                                                 // Turntable Position1
-  uint8_t           Position2;                                                 // Turntable Position2
-  uint8_t           OutputPin1;                                                // Arduino Output Pin 1
-  uint8_t           OutputPin2;                                                // Arduino Output Pin 2
-  boolean           ReverseTrack1;                                             // Reverse Track Power: 0 = Normal, 1 = Reversed
-  boolean           ReverseTrack2;                                             // Reverse Track Power: 0 = Normal, 1 = Reversed
-  boolean           Finished;                                                  // Command Busy = 0 or Finished = 1 (Ready for next command)
-  boolean           Active;                                                    // Command Not Active = 0, Active = 1
-  unsigned long     durationMilli;                                             // Pulse Time in ms
-  unsigned long     offMilli;                                                  // For internal use  // Do not change this value
-} // END typedef
-DCC_Accessory_Structure;                                                       // End DCC Accessory Structure
-
-DCC_Accessory_Structure DCC_Accessory[DCC_Max_Accessories];                    // Define DCC_Accessory as DCC Accessory Structure
-LiquidCrystal_I2C lcd(0x27, 20, 4);                                            // I2C Liquid Crystal Display on Address 0x27 with 20 characters by 4 rows
-
-
-//-----------------------------------------------------------------------------//
-void setup()                                                                   // Arduino Setup
-{
-  Serial.begin(115200);
-  Serial.println(F("DCCNext-Controlled-Kato-Turntable_v2.07 -- (c)JMRRvS 2021-01-13"));
-                                                                               // Serial print loaded sketch
-  lcd.init();                                                                  // Initialise LCD
-  lcd.backlight();                                                             // Switch backlight ON
-  lcd.setCursor(0, 0);                                                         // Set cursor to first line and left corner
-  //           01234567890123456789                                            // Sample text
-  lcd.print(F("DCCNext Controlled  "));                                        // LCD print text
-  lcd.setCursor(0, 1);                                                         // Set cursor to second line and left corner
-  //           01234567890123456789                                            // Sample text
-  lcd.print(F("Kato Turntable v2.07"));                                        // LCD print text
-  lcd.setCursor(0, 2);                                                         // Set cursor to third line and left corner
-  //           01234567890123456789                                            // Sample text
-  lcd.print(F("--------------------"));                                        // LCD print text
-  Turntable_Switch.setDebounceTime(Turntable_SwitchDebounceTime);              // Set Debounce Time
-  Button_T180.setDebounceTime(Button_T180DebounceTime);                        // Set Debounce Time
-  Button_Right.setDebounceTime(Button_RightDebounceTime);                      // Set Debounce Time
-  Button_Left.setDebounceTime(Button_LeftDebounceTime);                        // Set Debounce Time
-  pinMode(DCC_Interrupt      , INPUT_PULLUP);                                  // Arduino Input Pin   2 = DCC signal = Interrupt 0
-  // pinMode defined with ezButton function                                    // Arduino Input Pin   3 = Turntable Trigger   = Turntable Cable Pin 1
-                                                                               // Arduino Ground Pin GND                      = Turntable Cable Pin 2
-  // pinMode defined with ezButton function                                    // Arduino Input  Pin  4 = Button Turn 180     = Turn 180
-  pinMode(Turntable_MotorM1  , OUTPUT);                                        // Arduino Output Pin  5 = Turntable Motor     = Turntable Cable Pin 3
-  pinMode(Turntable_MotorM2  , OUTPUT);                                        // Arduino Output Pin  6 = Turntable Motor     = Turntable Cable Pin 4
-  pinMode(BridgeRelayL1      , OUTPUT);                                        // Arduino Output Pin  7 = ULN2803A Pin 1+2    = Bridge Relay L1-
-  pinMode(BridgeRelayL2      , OUTPUT);                                        // Arduino Output Pin  8 = ULN2803A Pin 3+4    = Bridge Relay L2-
-  pinMode(Turntable_LockL2   , OUTPUT);                                        // Arduino Output Pin  9 = Turntable Lock L2   = Turntable Cable Pin 6
-  pinMode(Turntable_LockL1   , OUTPUT);                                        // Arduino Output Pin 10 = Turntable Lock L1   = Turntable Cable Pin 5
-  // pinMode defined with ezButton function                                    // Arduino Input  Pin 11 = Button Turn Right   = Turn 1 Step ClockWise
-  // pinMode defined with ezButton function                                    // Arduino Input  Pin 12 = Button Turn Left    = Turn 1 Step Counter ClockWise
-  pinMode(WatchdogLED        , OUTPUT);                                        // Arduino Output Pin 13 = DCCNext Red LED     = Watchdog Blink
-  pinMode(RedLED             , OUTPUT);                                        // Arduino Output Pin 14 = Red LED             = Function Red
-  pinMode(GreenLED           , OUTPUT);                                        // Arduino Output Pin 15 = Green LED           = Function Green
-  pinMode(YellowLED          , OUTPUT);                                        // Arduino Output Pin 16 = Yellow LED          = TURN 180
-  pinMode(Turntable_StatusLED, OUTPUT);                                        // Arduino Output Pin 17 = Blue LED            = Bridge in Position
-  digitalWrite(Turntable_MotorM1, LOW);                                        // Arduino Output Pin  5 = Turntable Motor     = Turntable Cable Pin 3
-  digitalWrite(Turntable_MotorM2, LOW);                                        // Arduino Output Pin  6 = Turntable Motor     = Turntable Cable Pin 4
-  digitalWrite(BridgeRelayL1    , LOW);                                        // Arduino Output Pin  7 = ULN2803A Pin 1+2    = Bridge Relay L1-
-  digitalWrite(BridgeRelayL2    , LOW);                                        // Arduino Output Pin  8 = ULN2803A Pin 3+4    = Bridge Relay L2-
-  digitalWrite(Turntable_LockL2 , LOW);                                        // Arduino Output Pin  9 = Turntable Lock L2   = Turntable Cable Pin 6
-  digitalWrite(Turntable_LockL1 , LOW);                                        // Arduino Output Pin 10 = Turntable Lock L1   = Turntable Cable Pin 5
-
-  DCC.SetBasicAccessoryDecoderPacketHandler(BasicAccDecoderPacket_Handler, true);
-  DCC_Accessory_ConfigureDecoderFunctions();
-  DCC.SetupDecoder( 0x00, 0x00, kDCC_INTERRUPT );
-  for (uint8_t AccDec = 0; AccDec < DCC_Max_Accessories; AccDec++)             // Begin loop through DCC Accessory Decoders
-  {
-    DCC_Accessory[AccDec].Button = 0;                                          // Switch OFF all DCC Accessory Decoders
-  } // END for
-
-  DCC_Action_LED_Startup();                                                    // All DCC Action LEDs ON and OFF  
-  Turntable_CurrentTrack = EEPROM.read(EE_Address);                            // Read Turntable Bridge Position from EEPROM
-  if ((Turntable_CurrentTrack < 1) || (Turntable_CurrentTrack > maxTrack))
-  {
-    Turntable_CurrentTrack = 0;                                                // Reset CurrentTrack if EEPROM value is out of range
-    Turntable_NewTrack = 0;                                                    // Reset NewTrack if EEPROM value is out of range
-    digitalWrite(Turntable_StatusLED, LOW);                                    // Set Arduino Output Pin 17 = Blue LED = Bridge in Position OFF
-    //                0123456789012345678901234                                // Sample text
-    Serial.println(F("EEPROM status unknown.   "));                            // Serial print text
-  } // END if
-  else
-  {
-    Turntable_NewTrack = Turntable_CurrentTrack;                               // Set new track to current track
-    digitalWrite(Turntable_StatusLED, HIGH);                                   // Set Arduino Output Pin 17 = Blue LED = Bridge in Position ON
-    BridgeRelayInit();                                                         // Initialize Reverse Tracks
-    BridgeRelayActive = true;                                                  // Activate Bridge Relay Set
-    BridgeRelaySet();                                                          // Set Bride Relay Status = ULN2803A
-  } // END else
-  TurntableLockOff();                                                          // Disable Outputs to L293D
-  LCDPrintTrackText();                                                         // LCD print text
-  LCDPrintTrackStatus();                                                       // LCD print text
-} // END setup
-
-//-----------------------------------------------------------------------------//
-void BasicAccDecoderPacket_Handler(int address, boolean activate, byte data)
-{
-  address -= 1;
-  address *= 4;
-  address += DCC_Address_Offset;                                               // Default = 1, for Multimaus = 4
-  address += (data & 0x06) >> 1;                                               // Convert NMRA packet address format to human address
-  boolean output = (data & 0x01) ? 1 : 0;                                      // Red = 0, Green = 1
-  for (uint8_t AccDec = 0; AccDec < DCC_Max_Accessories; AccDec++)             // Begin loop through DCC Accessory Decoders
-  {
-    if (address == DCC_Accessory[AccDec].Address)
-    {
-      DCC_Accessory[AccDec].Active = 1;                                        // DCC Accessory Active
-      if (output)
-      {
-        DCC_Accessory[AccDec].Button = 1;                                      // Green Button
-      } // END if
-      else
-      {
-        DCC_Accessory[AccDec].Button = 0;                                      // Red Button
-      } // END else
-    } // END if
-  } // END for
-} // END BasicAccDecoderPacket_Handler
-
-//-----------------------------------------------------------------------------//
-void DCC_Accessory_ConfigureDecoderFunctions()
-{
-  DCC_Accessory[0].Address        =   400;                                     // DCC Address 400 0 = Turn 180 CW , 1 = Turn 180 CCW
-  DCC_Accessory[0].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[0].Position1      =     0;                                     // Turn 180 CW
-  DCC_Accessory[0].Position2      =     0;                                     // Turn 180 CCW
-  DCC_Accessory[0].OutputPin1     =    16;                                     // Arduino Output Pin 16 = Yellow LED
-  DCC_Accessory[0].OutputPin2     =    16;                                     // Arduino Output Pin 16 = Yellow LED
-  DCC_Accessory[0].ReverseTrack1  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[0].ReverseTrack2  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[0].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[0].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[0].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[1].Address        =   401;                                     // DCC Address 401
-  DCC_Accessory[1].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[1].Position1      =     1;                                     // Goto Track # CCW
-  DCC_Accessory[1].Position2      =    19;                                     // Goto Track # CW
-  DCC_Accessory[1].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[1].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[1].ReverseTrack1  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[1].ReverseTrack2  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[1].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[1].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[1].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[2].Address        =   402;                                     // DCC Address
-  DCC_Accessory[2].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[2].Position1      =     2;                                     // Goto Track # CCW
-  DCC_Accessory[2].Position2      =    20;                                     // Goto Track # CW
-  DCC_Accessory[2].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[2].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[2].ReverseTrack1  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[2].ReverseTrack2  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[2].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[2].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[2].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[3].Address        =   403;                                     // DCC Address
-  DCC_Accessory[3].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[3].Position1      =     3;                                     // Goto Track # CCW
-  DCC_Accessory[3].Position2      =    21;                                     // Goto Track # CW
-  DCC_Accessory[3].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[3].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[3].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[3].ReverseTrack2  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[3].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[3].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[3].durationMilli  =   250;                                     // Pulse Time in ms
-                   
-  DCC_Accessory[4].Address        =   404;                                     // DCC Address
-  DCC_Accessory[4].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[4].Position1      =     4;                                     // Goto Track # CCW
-  DCC_Accessory[4].Position2      =    22;                                     // Goto Track # CW
-  DCC_Accessory[4].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[4].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[4].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[4].ReverseTrack2  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[4].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[4].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[4].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[5].Address        =   405;                                     // DCC Address
-  DCC_Accessory[5].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[5].Position1      =     5;                                     // Goto Track # CCW
-  DCC_Accessory[5].Position2      =    23;                                     // Goto Track # CW
-  DCC_Accessory[5].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[5].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[5].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[5].ReverseTrack2  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[5].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[5].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[5].durationMilli  =   250;                                     // Pulse Time in ms
-                   
-  DCC_Accessory[6].Address        =   406;                                     // DCC Address
-  DCC_Accessory[6].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[6].Position1      =     6;                                     // Goto Track # CCW
-  DCC_Accessory[6].Position2      =    24;                                     // Goto Track # CW
-  DCC_Accessory[6].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[6].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[6].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[6].ReverseTrack2  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[6].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[6].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[6].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[7].Address        =   407;                                     // DCC Address
-  DCC_Accessory[7].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[7].Position1      =     7;                                     // Goto Track # CCW
-  DCC_Accessory[7].Position2      =    25;                                     // Goto Track # CW
-  DCC_Accessory[7].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[7].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[7].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[7].ReverseTrack2  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[7].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[7].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[7].durationMilli  =   250;                                     // Pulse Time in ms
-                   
-  DCC_Accessory[8].Address        =   408;                                     // DCC Address
-  DCC_Accessory[8].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[8].Position1      =     8;                                     // Goto Track # CCW
-  DCC_Accessory[8].Position2      =    26;                                     // Goto Track # CW
-  DCC_Accessory[8].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[8].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[8].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[8].ReverseTrack2  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[8].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[8].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[8].durationMilli  =   250;                                     // Pulse Time in ms
-                   
-  DCC_Accessory[9].Address        =   409;                                     // DCC Address
-  DCC_Accessory[9].Button         =     0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[9].Position1      =     9;                                     // Goto Track # CCW
-  DCC_Accessory[9].Position2      =    27;                                     // Goto Track # CW
-  DCC_Accessory[9].OutputPin1     =    14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[9].OutputPin2     =    15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[9].ReverseTrack1  =     0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[9].ReverseTrack2  =     1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[9].Finished       =     1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[9].Active         =     0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[9].durationMilli  =   250;                                     // Pulse Time in ms
-
-  DCC_Accessory[10].Address        =  410;                                     // DCC Address
-  DCC_Accessory[10].Button         =    0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[10].Position1      =   10;                                     // Goto Track # CCW
-  DCC_Accessory[10].Position2      =   28;                                     // Goto Track # CW
-  DCC_Accessory[10].OutputPin1     =   14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[10].OutputPin2     =   15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[10].ReverseTrack1  =    0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[10].ReverseTrack2  =    1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[10].Finished       =    1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[10].Active         =    0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[10].durationMilli  =  250;                                     // Pulse Time in ms
-
-  DCC_Accessory[11].Address        =  411;                                     // DCC Address
-  DCC_Accessory[11].Button         =    0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[11].Position1      =   11;                                     // Goto Track # CCW
-  DCC_Accessory[11].Position2      =   29;                                     // Goto Track # CW
-  DCC_Accessory[11].OutputPin1     =   14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[11].OutputPin2     =   15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[11].ReverseTrack1  =    0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[11].ReverseTrack2  =    1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[11].Finished       =    1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[11].Active         =    0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[11].durationMilli  =  250;                                     // Pulse Time in ms
-
-  DCC_Accessory[12].Address        =  412;                                     // DCC Address
-  DCC_Accessory[12].Button         =    0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[12].Position1      =   12;                                     // Goto Track # CCW
-  DCC_Accessory[12].Position2      =   30;                                     // Goto Track # CW
-  DCC_Accessory[12].OutputPin1     =   14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[12].OutputPin2     =   15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[12].ReverseTrack1  =    0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[12].ReverseTrack2  =    1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[12].Finished       =    1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[12].Active         =    0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[12].durationMilli  =  250;                                     // Pulse Time in ms
-
-  DCC_Accessory[13].Address        =  413;                                     // DCC Address
-  DCC_Accessory[13].Button         =    0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[13].Position1      =   31;                                     // Goto Track # CCW
-  DCC_Accessory[13].Position2      =   13;                                     // Goto Track # CW
-  DCC_Accessory[13].OutputPin1     =   14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[13].OutputPin2     =   15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[13].ReverseTrack1  =    1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[13].ReverseTrack2  =    0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[13].Finished       =    1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[13].Active         =    0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[13].durationMilli  =  250;                                     // Pulse Time in ms
-
-  DCC_Accessory[14].Address        =  414;                                     // DCC Address
-  DCC_Accessory[14].Button         =    0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[14].Position1      =   32;                                     // Goto Track # CCW
-  DCC_Accessory[14].Position2      =   14;                                     // Goto Track # CW
-  DCC_Accessory[14].OutputPin1     =   14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[14].OutputPin2     =   15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[14].ReverseTrack1  =    1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[14].ReverseTrack2  =    0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[14].Finished       =    1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[14].Active         =    0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[14].durationMilli  =  250;                                     // Pulse Time in ms
-
-  DCC_Accessory[15].Address        =  415;                                     // DCC Address
-  DCC_Accessory[15].Button         =    0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[15].Position1      =   33;                                     // Goto Track # CCW
-  DCC_Accessory[15].Position2      =   15;                                     // Goto Track # CW
-  DCC_Accessory[15].OutputPin1     =   14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[15].OutputPin2     =   15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[15].ReverseTrack1  =    1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[15].ReverseTrack2  =    0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[15].Finished       =    1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[15].Active         =    0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[15].durationMilli  =  250;                                     // Pulse Time in ms
-
-  DCC_Accessory[16].Address        =  416;                                     // DCC Address
-  DCC_Accessory[16].Button         =    0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[16].Position1      =   34;                                     // Goto Track # CCW
-  DCC_Accessory[16].Position2      =   16;                                     // Goto Track # CW
-  DCC_Accessory[16].OutputPin1     =   14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[16].OutputPin2     =   15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[16].ReverseTrack1  =    1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[16].ReverseTrack2  =    0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[16].Finished       =    1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[16].Active         =    0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[16].durationMilli  =  250;                                     // Pulse Time in ms
-
-  DCC_Accessory[17].Address        =  417;                                     // DCC Address
-  DCC_Accessory[17].Button         =    0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[17].Position1      =   35;                                     // Goto Track # CCW
-  DCC_Accessory[17].Position2      =   17;                                     // Goto Track # CW
-  DCC_Accessory[17].OutputPin1     =   14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[17].OutputPin2     =   15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[17].ReverseTrack1  =    1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[17].ReverseTrack2  =    0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[17].Finished       =    1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[17].Active         =    0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[17].durationMilli  =  250;                                     // Pulse Time in ms
-
-  DCC_Accessory[18].Address        =  418;                                     // DCC Address
-  DCC_Accessory[18].Button         =    0;                                     // Accessory Button: 0 = OFF (Red), 1 = ON (Green)
-  DCC_Accessory[18].Position1      =   36;                                     // Goto Track # CCW
-  DCC_Accessory[18].Position2      =   18;                                     // Goto Track # CW
-  DCC_Accessory[18].OutputPin1     =   14;                                     // Arduino Output Pin 14 = Red LED
-  DCC_Accessory[18].OutputPin2     =   15;                                     // Arduino Output Pin 15 = Green LED
-  DCC_Accessory[18].ReverseTrack1  =    1;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[18].ReverseTrack2  =    0;                                     // Reverse Track Power: 0 = Normal, 1 = Reversed
-  DCC_Accessory[18].Finished       =    1;                                     // Command Busy = 0 or Finished = 1
-  DCC_Accessory[18].Active         =    0;                                     // Command Not Active = 0, Active = 1
-  DCC_Accessory[18].durationMilli  =  250;                                     // Pulse Time in ms
-} // END DCC_Accessory_ConfigureDecoderFunctions
-
-//-----------------------------------------------------------------------------//
-void DCC_Accessory_CheckStatus()
-{
-  for (uint8_t AccDec = 0; AccDec < DCC_Max_Accessories; AccDec++)             // Begin loop through DCC Accessory Decoders
-  {
-    DCC.loop();                                                                // Loop DCC Library
-    if (DCC_Accessory[AccDec].Finished && DCC_Accessory[AccDec].Active)
-    {
-      DCC_Accessory[AccDec].Finished = 0;
-      DCC_Accessory[AccDec].offMilli = millis() + DCC_Accessory[AccDec].durationMilli;
-      switch (DCC_Accessory[AccDec].Address)
-      {
-        case (400):                                                            // DCC Address 400 0 = TURN 180, 1 = ????????
-          if (DCC_Accessory[AccDec].Button == 0)                               // Red Button    : 0 = TURN 180
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin2;                 // Set Arduino Output Pin
-            if (Turntable_CurrentTrack < 19)
-            {
-              Turntable_NewTrack = Turntable_CurrentTrack + (maxTrack / 2);
-            } // END if
-            else
-            {
-              Turntable_NewTrack = Turntable_CurrentTrack - (maxTrack / 2);
-            } // END else
-            Turntable_OldAction = Turntable_NewAction;                         // Switch Old Action
-            Turntable_NewAction = DCC_T180;                                    // Set New Action: Turn Motor (maxTrack / 2) Steps
-          } // END if
-  
-          if (DCC_Accessory[AccDec].Button == 1)                               // Green Button  : 1 = ????????
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin2;                 // Set Arduino Output Pin
-            if (Turntable_CurrentTrack < 19)
-            {
-              Turntable_NewTrack = Turntable_CurrentTrack + (maxTrack / 2);
-            } // END if
-            else
-            {
-              Turntable_NewTrack = Turntable_CurrentTrack - (maxTrack / 2);
-            } // END else
-            Turntable_OldAction = Turntable_NewAction;                         // Switch Old Action
-            Turntable_NewAction = DCC_T180;                                    // Set New Action: Turn Motor (maxTrack / 2) Steps
-          } // END if
-          break; // END case 226
-  
-        default:                                                               // DCC Address xxx to DCC_Max_Accessories
-          if (DCC_Accessory[AccDec].Button == 0)                               // Red Button   : 0 = Goto Track Position1
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin1;                 // Set Arduino Output Pin - case default 0 = Red
-            Turntable_NewTrack = DCC_Accessory[AccDec].Position1;              // Set New Turntable Track from DCC Address
-            Turntable_OldAction = Turntable_NewAction;                         // Switch Old Action
-            Turntable_NewAction = DCC_TURN;                                    // Set New Action: DCC_TURN
-          } // END if
-  
-          if (DCC_Accessory[AccDec].Button == 1)                               // Green Button : 1 = Goto Track Position2
-          {
-            DCC_Action_LED = DCC_Accessory[AccDec].OutputPin2;                 // Set Arduino Output Pin - case default 1 = Green
-            Turntable_NewTrack = DCC_Accessory[AccDec].Position2;              // Set New Turntable Track from DCC Address
-            Turntable_OldAction = Turntable_NewAction;                         // Switch Old Action
-            Turntable_NewAction = DCC_TURN;                                    // Set New Action: DCC_TURN
-          } // END if
-          break; // END default
-  
-      } // END switch
-      //              0123456789012345678901234                                // Sample text
-      Serial.println();                                                        // Serial print text
-	  Serial.print(F("(A) DCC: "));                                            // Serial print text
-      Serial.print(DCC_Accessory[AccDec].Address);                             // Serial print value
-      Serial.print(F(" - "));
-      Serial.print(DCC_Accessory[AccDec].Button);                              // Serial print value
-      Serial.print(F(" ("));                                                   // Serial print text
-      Serial.print((DCC_Accessory[AccDec].Button) ? "G" : "R");                // 0 = Red, 1 = Green
-      Serial.print(F(") --> "));                                               // Serial print text
-      PrintStatus();                                                           // Print Actions and Track Numbers
-      LCDPrintTrackStatus();                                                   // LCD print text
-    } // END if
-    if ((!DCC_Accessory[AccDec].Finished) && (millis() > DCC_Accessory[AccDec].offMilli))
-    {
-      DCC_Accessory[AccDec].Finished = 1;
-      DCC_Accessory[AccDec].Active = 0;
-    } // END if
-  } // END for                                                                 // End loop through DCC Accessory Decoders
-} // END DCC_Accessory_CheckStatus
-
-//-----------------------------------------------------------------------------//
-void Button_T180_CheckStatus()                                                 // Check Status Button T180
-{
-  Button_T180.loop();                                                          // Check debounce and update the state of the button
-  Button_T180_CurrentState = Button_T180.getState();                           // HIGH = Released, LOW = Pressed
-  if (Button_T180_LastState == HIGH && Button_T180_CurrentState == LOW)        // LOW = Pressed
-  {
-    Button_T180_IsPressed = true;
-    Button_T180_IsPressing = true;
-    Button_T180_ShortPressed = false;
-    Button_T180_LongPressed = false;
-    Button_T180_PressedTime = millis();
-  } // END if
-  else if (Button_T180_LastState == LOW && Button_T180_CurrentState == HIGH)   // HIGH = Released
-  {
-    Button_T180_IsPressing = false;
-    Button_T180_ReleasedTime = millis();
-    Button_T180_PressTime = Button_T180_ReleasedTime - Button_T180_PressedTime;
-    if (Button_T180_PressTime < Button_T180_ShortPressTime)
-    {
-      Button_T180_ShortPressed = true;
-    } // END if
-    else if (Button_T180_LongPressed)
-    {
-      Button_T180_LongPressed = false;
-    } // END else if
-  } // END else if
-  if (Button_T180_IsPressing && !Button_T180_LongPressed)
-  {
-    Button_T180_PressTime = millis() - Button_T180_PressedTime;
-    if (Button_T180_PressTime >= Button_T180_LongPressTime)
-    {
-      Button_T180_LongPressed = true;
-    } // END if
-  } // END if
-  if (Button_T180_ShortPressed)                                                // Button T180 Short Pressed : TURN 180
-  {
-    Button_T180_ShortPressed = false;
-    DCC_Action_LED = 16;                                                       // Set Arduino Output Pin 16 = Yellow LED
-    if (Turntable_CurrentTrack <= (maxTrack / 2))
-    {
-      Turntable_NewTrack = Turntable_CurrentTrack + (maxTrack / 2);
-    } // END if
-    else
-    {
-      Turntable_NewTrack = Turntable_CurrentTrack - (maxTrack / 2);
-    } // END else
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = BUT_T180;                                            // Set New Action: Turn Motor (maxTrack / 2) Steps
-    //              0123456789012345678901234                                  // Sample text
-    Serial.println();                                                          // Serial print text
-    Serial.print(F("BUT_T180 Short: "));                                       // Serial print text
-    Serial.print(Button_T180_PressTime);                                       // Serial print value
-    if (Button_T180_PressTime < 100)
-    {
-      Serial.print(F("   --> "));                                              // Serial print text
-    } // END if
-    else if (Button_T180_PressTime < 1000)
-    {
-      Serial.print(F("  --> "));                                               // Serial print text
-    } // END else if
-    else
-    {
-      Serial.print(F(" --> "));                                                // Serial print text
-    } // END else
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  if (Button_T180_IsPressed && Button_T180_LongPressed)                        // Button T180 Long Pressed : Store current position as track 1
-  {
-    Button_T180_IsPressed = false;
-    DCC_Action_LED = 16;                                                       // Set Arduino Output Pin 16 = Yellow LED
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = BUT_STORE;                                           // Set New Action: Store current position as track 1
-    //              0123456789012345678901234                                  // Sample text
-    Serial.println();                                                          // Serial print text
-    Serial.print(F("BUT_T180 Long: "));                                        // Serial print text
-    Serial.print(Button_T180_PressTime);                                       // Serial print value
-    Serial.print(F("  --> "));                                                 // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  Button_T180_LastState = Button_T180_CurrentState;
-} // END Button_T180_CheckStatus
-
-//-----------------------------------------------------------------------------//
-void Button_Right_CheckStatus()                                                // Check Status Button RIGHT
-{
-  Button_Right.loop();                                                         // Check debounce and update the state of the button
-  Button_Right_CurrentState = Button_Right.getState();                         // HIGH = Released, LOW = Pressed
-  if (Button_Right_LastState == HIGH && Button_Right_CurrentState == LOW)      // LOW = Pressed
-  {
-    Button_Right_IsPressed = true;
-    Button_Right_IsPressing = true;
-    Button_Right_ShortPressed = false;
-    Button_Right_LongPressed = false;
-    Button_Right_PressedTime = millis();
-  } // END if
-  else if (Button_Right_LastState == LOW && Button_Right_CurrentState == HIGH) // HIGH = Released
-  {
-    Button_Right_IsPressing = false;
-    Button_Right_ReleasedTime = millis();
-    Button_Right_PressTime = Button_Right_ReleasedTime - Button_Right_PressedTime;
-    if (Button_Right_PressTime < Button_Right_ShortPressTime)
-    {
-      Button_Right_ShortPressed = true;
-    } // END if
-    else if (Button_Right_LongPressed)
-    {
-      Button_Right_LongPressed = false;
-    } // END else if
-  } // END else if
-  if (Button_Right_IsPressing && !Button_Right_LongPressed)
-  {
-    Button_Right_PressTime = millis() - Button_Right_PressedTime;
-    if (Button_Right_PressTime >= Button_Right_LongPressTime)
-    {
-      Button_Right_LongPressed = true;
-    } // END if
-  } // END if
-  if (Button_Right_ShortPressed)                                               // Button RIGHT Short Pressed : TURN 1 CW
-  {
-    Button_Right_ShortPressed = false;
-    DCC_Action_LED = 14;                                                       // Set Arduino Output Pin 14 = Red LED
-    Turntable_NewTrack = Turntable_CurrentTrack + 1;
-    if (Turntable_NewTrack > maxTrack)                                         // From Track 36 to Track 1
-    {
-      Turntable_NewTrack = 1;                                                  // Track (1)
-    } // END if
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = BUT_T1CW;                                            // Set New Action: Turn Motor 1 Step ClockWise
-    //              0123456789012345678901234                                  // Sample text
-    Serial.println();                                                          // Serial print text
-    Serial.print(F("BUT_RIGHT Short: "));                                      // Serial print text
-    Serial.print(Button_Right_PressTime);                                      // Serial print value
-    if (Button_Right_PressTime < 100)
-    {
-      Serial.print(F("  --> "));                                               // Serial print text
-    } // END if
-    else if (Button_Right_PressTime < 1000)
-    {
-      Serial.print(F(" --> "));                                                // Serial print text
-    } // END if
-    else
-    {
-      Serial.print(F("--> "));                                                 // Serial print text
-    } // END else
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  if (Button_Right_IsPressed && Button_Right_LongPressed)                      // Button RIGHT Long Pressed : Reset Turntable Lock
-  {
-    Button_Right_IsPressed = false;
-    DCC_Action_LED = 14;                                                       // Set Arduino Output Pin 14 = Red LED
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = BUT_RLOCK;                                           // Set New Action: Reset Turntable Lock
-    //              0123456789012345678901234                                  // Sample text
-    Serial.println();                                                          // Serial print text
-    Serial.print(F("BUT_RIGHT Long: "));                                       // Serial print text
-    Serial.print(Button_Right_PressTime);                                      // Serial print value
-    Serial.print(F(" --> "));                                                  // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  Button_Right_LastState = Button_Right_CurrentState;
-} // END Button_Right_CheckStatus
-
-//-----------------------------------------------------------------------------//
-void Button_Left_CheckStatus()                                                 // Check Status Button LEFT
-{
-  Button_Left.loop();                                                          // Check debounce and update the state of the button
-  Button_Left_CurrentState = Button_Left.getState();                           // HIGH = Released, LOW = Pressed
-  if (Button_Left_LastState == HIGH && Button_Left_CurrentState == LOW)        // LOW = Pressed
-  {
-    Button_Left_IsPressed = true;
-    Button_Left_IsPressing = true;
-    Button_Left_ShortPressed = false;
-    Button_Left_LongPressed = false;
-    Button_Left_PressedTime = millis();
-  } // END if
-  else if (Button_Left_LastState == LOW && Button_Left_CurrentState == HIGH)   // HIGH = Released
-  {
-    Button_Left_IsPressing = false;
-    Button_Left_ReleasedTime = millis();
-    Button_Left_PressTime = Button_Left_ReleasedTime - Button_Left_PressedTime;
-    if (Button_Left_PressTime < Button_Left_ShortPressTime)
-    {
-      Button_Left_ShortPressed = true;
-    } // END if
-    else if (Button_Left_LongPressed)
-    {
-      Button_Left_LongPressed = false;
-    } // END else if
-  } // END else if
-  if (Button_Left_IsPressing && !Button_Left_LongPressed)
-  {
-    Button_Left_PressTime = millis() - Button_Left_PressedTime;
-    if (Button_Left_PressTime >= Button_Left_LongPressTime)
-    {
-      Button_Left_LongPressed = true;
-    } // END if
-  } // END if
-  if (Button_Left_ShortPressed)                                                // Button LEFT Short Pressed : TURN 1 CCW
-  {
-    Button_Left_ShortPressed = false;
-    DCC_Action_LED = 15;                                                       // Set Arduino Output Pin 15 = Green LED
-    Turntable_NewTrack = Turntable_CurrentTrack - 1;
-    if (Turntable_NewTrack == 0)                                               // From Track 1 to Track 36
-    {
-      Turntable_NewTrack = maxTrack;                                           // Track (maxTrack)
-    } // END if
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = BUT_T1CCW;                                           // Set New Action: Turn Motor 1 Step ClockWise
-    //              0123456789012345678901234                                  // Sample text
-    Serial.println();                                                          // Serial print text
-    Serial.print(F("BUT_LEFT Short: "));                                       // Serial print text
-    Serial.print(Button_Left_PressTime);                                       // Serial print value
-    if (Button_Left_PressTime < 100)
-    {
-      Serial.print(F("   --> "));                                              // Serial print text
-    } // END if
-    else if (Button_Left_PressTime < 1000)
-    {
-      Serial.print(F("  --> "));                                               // Serial print text
-    } // END if
-    else
-    {
-      Serial.print(F(" --> "));                                                // Serial print text
-    } // END else
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  if (Button_Left_IsPressed && Button_Left_LongPressed)                        // Button LEFT Long Pressed : Set Turntable Lock
-  {
-    Button_Left_IsPressed = false;
-    DCC_Action_LED = 15;                                                       // Set Arduino Output Pin 15 = Green LED
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = BUT_SLOCK;                                           // Set New Action: Set Turntable Lock
-    //              0123456789012345678901234                                  // Sample text
-    Serial.println();                                                          // Serial print text
-    Serial.print(F("BUT_LEFT Long: "));                                        // Serial print text
-    Serial.print(Button_Left_PressTime);                                       // Serial print value
-    Serial.print(F("  --> "));                                                 // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  Button_Left_LastState = Button_Left_CurrentState;
-} // END Button_Left_CheckStatus
-
-//-----------------------------------------------------------------------------//
-void Turntable_CheckSwitch()                                                   // From HIGH to LOW = Bridge in Position
-{
-  Turntable_Switch.loop();                                                     // Check debounce and update the state of the Turntable Switch
-  if (Turntable_Switch.isPressed())                                            // Bridge in Position
-  {
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = POS;                                                 // Set New Action: Bridge in Position
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(A) TT_CheckSwitch   --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-} // END Turntable_CheckSwitch
-
-//-----------------------------------------------------------------------------//
-void Turntable_StoreTrack()                                                    // Store Track Position in EEPROM
-{
-  digitalWrite(Turntable_StatusLED, HIGH);                                     // Set Arduino Onboard LED 17 = Blue LED = Bridge in Position ON
-  digitalWrite(DCC_Action_LED, LOW);                                           // DCC Action LED OFF
-  EEPROM.update(EE_Address, Turntable_CurrentTrack);                           // Store Turntable bridge position into EEPROM
-  Serial.print(F("(A) EEPROM Track "));                                        // Serial print text
-  if (Turntable_CurrentTrack < 10)
-  {
-    Serial.print(F(" "));                                                      // Serial print text
-  } // END if
-  Serial.print(Turntable_CurrentTrack);                                        // Serial print value
-  Serial.print(F("  --> "));                                                   // Serial print text
-  PrintStatus();                                                               // Print Actions and Track Numbers
-} // END Turntable_StoreTrack
-
-//-----------------------------------------------------------------------------//
-void Turntable_CheckPos()                                                      // Check if Bridge on wanted track position
-{
-  if (Turntable_CurrentTrack == Turntable_NewTrack)                            // Bridge in Position = Stop Motor
-  {
-    switch (Turntable_OldAction)                                               // Check OldAction
-    {
-      case MCW:                                                                // Turntable turning ClockWise
-        speedValue = 0;                                                        // Zero = Direction Stop - Old Action = MCW
-        Turntable_SetMotorSpeed(speedValue);                                   // Motor Stop - Old Action = MCW
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = STOP;                                            // Set New Action: STOP
-        //              0123456789012345678901234                              // Sample text
-        Serial.print(F("(A) TT_CheckPos MCW  --> "));                          // Serial print text
-        PrintStatus();                                                         // Print Actions and Track Numbers
-        break; // END case MCW
-        
-      case MCCW:                                                               // Turntable turning Counter ClockWise
-        speedValue = 0;                                                        // Zero = Direction Stop - Old Action = MCCW
-        Turntable_SetMotorSpeed(speedValue);                                   // Motor Stop - Old Action = MCCW
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = STOP;                                            // Set New Action: STOP
-        //              0123456789012345678901234                              // Sample text
-        Serial.print(F("(A) TT_CheckPos MCCW --> "));                          // Serial print text
-        PrintStatus();                                                         // Print Actions and Track Numbers
-        break; // END case MCCW
-        
-      default:                                                                 // None of the above
-        //              0123456789012345678901234                              // Sample text
-        Serial.print(F("(A) TT_CheckPos "));                                   // Serial print text
-        Serial.print(Turntable_OldAction);                                     // Serial print value
-        Serial.print(F(" --> "));                                              // Serial print text
-        PrintStatus();                                                         // Print Actions and Track Numbers
-        break; // END default
-
-    } // END switch
-  } // END if
-  else                                                                         // Bridge NOT in Position = Don't Stop Motor
-  {
-    switch (Turntable_OldAction)                                               // Check OldAction
-    {
-      case MCW:                                                                // Turntable turning ClockWise
-        digitalWrite(Turntable_StatusLED, LOW);                                // Set Arduino Onboard LED 17 = Blue LED = Bridge in Position OFF
-        digitalWrite(DCC_Action_LED  , HIGH);                                  // Set DCC Action LED ON
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = MCW;                                             // Set New Action: MCW
-        //              0123456789012345678901234                              // Sample text
-        Serial.print(F("TT_CheckPos MCW      --> "));                          // Serial print text
-        PrintStatus();                                                         // Print Actions and Track Numbers
-        break; // END case MCW
-        
-      case MCCW:                                                               // Turntable turning Counter ClockWise
-        digitalWrite(Turntable_StatusLED, LOW);                                // Set Arduino Onboard LED 17 = Blue LED = Bridge in Position OFF
-        digitalWrite(DCC_Action_LED  , HIGH);                                  // Set DCC Action LED ON
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = MCCW;                                            // Set New Action: MCCW
-        //              0123456789012345678901234                              // Sample text
-        Serial.print(F("TT_CheckPos MCCW     --> "));                          // Serial print text
-        PrintStatus();                                                         // Print Actions and Track Numbers
-        break; // END case MCCW
-        
-      default:                                                                 // None of the above
-        //              0123456789012345678901234                              // Sample text
-        Serial.print(F("TT_CheckPos "));                                       // Serial print text
-        Serial.print(Turntable_OldAction);                                     // Serial print value
-        Serial.print(F(" --> "));                                              // Serial print text
-        PrintStatus();                                                         // Print Actions and Track Numbers
-        break; // END default
-        
-    } // END switch
-  } // END else
-} // END Turntable_CheckPos
-
-//-----------------------------------------------------------------------------//
-void DCC_Accessory_LED_OFF()                                                   // All LEDs OFF
-{
-  for (uint8_t AccDec = 0; AccDec < DCC_Max_Accessories; AccDec++)             // Begin loop through DCC Accessory Decoders
-  {
-    digitalWrite(DCC_Accessory[AccDec].OutputPin1, LOW);                       // LED OFF
-    digitalWrite(DCC_Accessory[AccDec].OutputPin2, LOW);                       // LED OFF
-  } // END for
-} // END DCC_Accessory_LED_OFF
-
-//-----------------------------------------------------------------------------//
-void DCC_Action_LED_Startup()                                                  // All DCC Action LEDs ON and OFF
-{
-  for (int DCC_Action_LED = 14; DCC_Action_LED <= 17; DCC_Action_LED++)        // Loop DCC Action LED
-  {                                                                            // Short LED test at startup
-    digitalWrite(DCC_Action_LED, HIGH);                                        // DCC Action LED ON
-    delay(200);                                                                // Simple delay for 200 msec
-    digitalWrite(DCC_Action_LED, LOW);                                         // DCC Action LED OFF
-  } // END for
-} // END DCC_Action_LED_Startup
-
-//-----------------------------------------------------------------------------//
-void BridgeRelayInit()                                                         //  Initialize Reverse Tracks
-{
-  Serial.println(F("Initialize Reverse Tracks (0 = Normal, 1 = Reversed)"));
-  for (uint8_t AccDec = 1; AccDec < DCC_Max_Accessories; AccDec++)             // DCC Accessory Decoder 0 is Turn 180 function. Start at #1
-  {                                                                            // Configure Reverse Track (false = Normal, true = Reversed)
-    Track1 = DCC_Accessory[AccDec].Position1;
-    DCC_ReverseTrack[Track1] = DCC_Accessory[AccDec].ReverseTrack1;            // Set Reverse Track Status (false = Normal, true = Reversed)
-    Serial.print(F("Address: "));                                              // Serial print text
-    Serial.print(DCC_Accessory[AccDec].Address);                               // Serial print value
-    Serial.print(F(",  Track "));                                              // Serial print text
-    if (Track1 < 10)
-    {
-    Serial.print(F(" "));                                                      // Serial print text
-    }
-    Serial.print(Track1);                                                      // Serial print value
-    Serial.print(F(": "));                                                     // Serial print text
-    Serial.print(DCC_ReverseTrack[Track1]);                                    // Serial print value
-    Serial.print(F(",  Track "));                                              // Serial print text
-    if (Track1 <= 18)
-    {
-      DCC_ReverseTrack[Track1 + 18] = !DCC_Accessory[AccDec].ReverseTrack1;    // Set Reverse Track Status (false = Normal, true = Reversed)
-      Serial.print(Track1 + 18);                                               // Serial print value
-      Serial.print(F(": "));                                                   // Serial print text
-      Serial.print(DCC_ReverseTrack[Track1 + 18]);                             // Serial print value
-    } // END if
-    else
-    {
-      DCC_ReverseTrack[Track1 - 18] = !DCC_Accessory[AccDec].ReverseTrack1;    // Set Reverse Track Status (false = Normal, true = Reversed)
-      Serial.print(Track1 - 18);                                               // Serial print value
-      Serial.print(F(": "));                                                   // Serial print text
-      Serial.print(DCC_ReverseTrack[Track1 - 18]);                             // Serial print value
-    } // END else
-    Serial.println();                                                          // Serial print text
-  } // END for
-} // END BridgeRelayInit()
-
-//-----------------------------------------------------------------------------//
-void BridgeRelayCheck()                                                        // Check Bride Relay Status = ULN2803A
-{
-  if ((BridgeRelayActive) && (millis() > BridgeRelayMaxMillis))                // Check Bridge Relay Active Timer
-  {
-    BridgeRelayOff();                                                          // Disable Outputs to ULN2803A
-  } // END if
-  
-} // END BridgeRelayCheck
-
-//-----------------------------------------------------------------------------//
-void BridgeRelaySet()                                                          // Set Bride Relay Status = ULN2803A
-{
-  if (BridgeRelayActive)                                                       // Check if Bridge Relay Set is active
-  {
-    switch (DCC_ReverseTrack[Turntable_CurrentTrack])
-    {
-      case (false):
-        BridgeRelayOnNormal();                                                 // Enable Outputs to ULN2803A - Normal
-        break; // END case false
-      case (true):
-        BridgeRelayOnReversed();                                               // Enable Outputs to ULN2803A - Reversed
-        break; // END case true
-    } // END switch
-  } // END if
-} // END BridgeRelaySet
-
-//-----------------------------------------------------------------------------//
-void BridgeRelayOff()                                                          // Disable Outputs to ULN2803A
-{
-  digitalWrite(BridgeRelayL1, LOW);                                            // Arduino Output Pin 7 OFF = ULN2803A Pin 1+2       = Bridge Relay L1-
-  digitalWrite(BridgeRelayL2, LOW);                                            // Arduino Output Pin 8 OFF = ULN2803A Pin 3+4       = Bridge Relay L2-
-  BridgeRelayMaxMillis = 0;                                                    // Reset Bridge Relay Active Timer
-  BridgeRelayActive = false;                                                   // Set Bridge Relay Not Active
-  //              0123456789012345678901234                                    // Sample text
-  Serial.print(F("(A) Relay Free       --> "));                                // Serial print text
-  PrintStatus();                                                               // Print Actions and Track Numbers
-} // END BridgeRelayOff
-
-//-----------------------------------------------------------------------------//
-void BridgeRelayOnNormal()                                                     // Enable Outputs to ULN2803A - Normal
-{
-  digitalWrite(BridgeRelayL1, HIGH);                                           // Arduino Output Pin 7 ON  = ULN2803A Pin 1+2       = Bridge Relay L1-
-  digitalWrite(BridgeRelayL2, LOW);                                            // Arduino Output Pin 8 OFF = ULN2803A Pin 3+4       = Bridge Relay L2-
-  BridgeRelayActive = true;                                                    // Set Bridge Relay Active
-  //              0123456789012345678901234                                    // Sample text
-  Serial.print(F("(A) Relay Normal     --> "));                                // Serial print text
-  PrintStatus();                                                               // Print Actions and Track Numbers
-} // END BridgeRelayOnNormal
-
-//-----------------------------------------------------------------------------//
-void BridgeRelayOnReversed()                                                   // Enable Outputs to ULN2803A - Reversed
-{
-  digitalWrite(BridgeRelayL1, LOW);                                            // Arduino Output Pin 7 OFF = ULN2803A Pin 1+2       = Bridge Relay L1-
-  digitalWrite(BridgeRelayL2, HIGH);                                           // Arduino Output Pin 8 ON  = ULN2803A Pin 3+4       = Bridge Relay L2-
-  BridgeRelayActive = true;                                                    // Set Bridge Relay Active
-  //              0123456789012345678901234                                    // Sample text
-  Serial.print(F("(A) Relay Reversed   --> "));                                // Serial print text
-  PrintStatus();                                                               // Print Actions and Track Numbers
-} // END BridgeRelayOnReversed
-
-//-----------------------------------------------------------------------------//
-void Turntable_SetMotorSpeed(int speed)                                        // Set Motor Speed
-{
-  DCC_Action_LED_Reset();                                                      // DCC Action LEDs OFF
-  digitalWrite(DCC_Action_LED, HIGH);                                          // DCC Action LED ON
-  switch (speed)
-  {
-    case (0):                                                                  // Motor Stop
-      digitalWrite(Turntable_MotorM1, LOW);                                    // Output T.M1 L293D OFF
-      digitalWrite(Turntable_MotorM2, LOW);                                    // Output T.M2 L293D OFF
-      BridgeRelayMaxMillis = 0;                                                // Reset Bridge Relay Active Timer
-      BridgeRelayActive = false;                                               // Deactivate Bridge Relay Set
-      TurntableLockSetLock();                                                  // Enable Outputs to L293D - Lock Active
-      break; // END case 0
-    case (maxSpeed):                                                           // Motor Forward
-      digitalWrite(Turntable_MotorM2, LOW);                                    // Output T.M2 L293D OFF
-      analogWrite(Turntable_MotorM1, speed);                                   // PWM on T.M1 L293D
-      BridgeRelayMaxMillis = millis() + BridgeRelayPulsTime;                   // Set Bridge Relay Active Timer
-      BridgeRelayActive = true;                                                // Activate Bridge Relay Set
-      break; // END case maxSpeed
-    case (-maxSpeed):                                                          // Motor Reverse
-      digitalWrite(Turntable_MotorM1, LOW);                                    // Output T.M1 L293D OFF
-      analogWrite(Turntable_MotorM2, -speed);                                  // PWM on T.M2 L293D
-      BridgeRelayMaxMillis = millis() + BridgeRelayPulsTime;                   // Set Bridge Relay Active Timer
-      BridgeRelayActive = true;                                                // Activate Bridge Relay Set
-      break; // END case -maxSpeed
-  } // END switch
-  LCDPrintTrackStatus();                                                       // LCD print text
-} // END Turntable_SetMotorSpeed
-
-//-----------------------------------------------------------------------------//
-uint8_t GetZone(uint8_t Track )                                                // Detemine Zone from Track
-{
-  //            FromZone
-  //           0  1  2  3
-  //   T       |  |  |  |
-  //   o  0 - {0, 1, 1, 0}
-  //   Z  1 - {0, 0, 1, 0}
-  //   o  2 - {0, 0, 0, 1}
-  //   n  3 - {1, 0, 0, 0}
-  //   e 
-  uint8_t Zone;
-  if      ( Track >=  0               && Track < (1*(maxTrack/4)) )            // Zone 0 = From  0 to  8 = Track  1 to 9
-  {
-    Zone = 0;
-  } // END if
-  else if ( Track >= (1*(maxTrack/4)) && Track < (2*(maxTrack/4)) )            // Zone 1 = From  9 to 17 = Track 10 to 18
-  {
-    Zone = 1;
-  } // END else if
-  else if ( Track >= (2*(maxTrack/4)) && Track < (3*(maxTrack/4)) )            // Zone 2 = From 18 to 26 = Track 19 to 27
-  {
-    Zone = 2;
-  } // END else if
-  else                                                                         // Zone 3 = From 27 to 35 = Track 28 to 36
-  {
-    Zone = 3;
-  } // END else
-  return Zone;
-} // END GetZone
-
-//-----------------------------------------------------------------------------//
-void SetDirection()                                                            // Set Direction based Action or Zones
-{
-  uint8_t FromZone, ToZone;
-  FromZone = GetZone( Turntable_CurrentTrack - 1 );                          // Detemine Zone from Current Track
-  ToZone   = GetZone( Turntable_NewTrack - 1);                               // Detemine Zone from New Track
-  if (Turntable_NewTrack == Turntable_CurrentTrack)                            // Check Current Track
-  {
-    speedValue = 0;                                                            // Zero = Direction Stop - Stop
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = STOP;                                                // Set New Action: STOP
-  } // END if
-  else                                                                         // Old Action unknown (probably STOP)
-  {
-    if ( ToZone != FromZone )                                                  // Only when FromZone not the same as ToZone
-    {
-      if ( Directions[ToZone][FromZone] )                                      // Directions matrix contains 1 = CCW
-      {
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = TCCW;                                            // Set New Action: Turn Motor M1 Counter ClockWise
-        speedValue = -maxSpeed;                                                // Negative = Direction Counter ClockWise
-      } // END if
-      else
-      {
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = TCW;                                             // Set New Action: Turn Motor M1 ClockWise
-        speedValue = maxSpeed;                                                 // Positive = Direction ClockWise
-      } // END else
-    } // END if
-    else                                                                       // FromZone same as ToZone
-    {
-      if ( Turntable_NewTrack < Turntable_CurrentTrack )
-      {
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = TCCW;                                            // Set New Action: Turn Motor M1 Counter ClockWise
-        speedValue = -maxSpeed;                                                // Negative = Direction Counter ClockWise
-      } // END if
-      else
-      {
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = TCW;                                             // Set New Action: Turn Motor M1 ClockWise
-        speedValue = maxSpeed;                                                 // Positive = Direction ClockWise
-      } // END else
-    } // END else
-  } // END else
-  Serial.print(F("(A) From Zone "));                                           // Serial print text
-  Serial.print(FromZone);                                                      // Serial print value
-  Serial.print(F(" to "));                                                     // Serial print text
-  Serial.print(ToZone);                                                        // Serial print value
-  Serial.print(F(" --> "));                                                    // Serial print text
-  PrintStatus();                                                               // Print Actions and Track Numbers
-} // END SetDirection
-
-//-----------------------------------------------------------------------------//
-void DCC_Action_LED_Reset()                                                    // DCC Action LEDs OFF
-{
-  for (int ledpin = 14; ledpin <= 17; ledpin++)                                // Loop ledpin
-  {
-    digitalWrite(ledpin, LOW);                                                 // Switch LED OFF
-  } // END for
-}
-
-//-----------------------------------------------------------------------------//
-void PrintStatus()                                                             // Print Actions and Track Numbers
-{
-  //              0123456789012345678901234                                    // Sample text
-  Serial.print(F("Old: "));                                                    // Serial print text
-  Serial.print(Turntable_States[Turntable_OldAction]);                         // Serial print action
-  Serial.print(F(", New: "));                                                  // Serial print text
-  Serial.print(Turntable_States[Turntable_NewAction]);                         // Serial print action
-  Serial.print(F(", Track: "));                                                // Serial print text
-  if (Turntable_CurrentTrack < 10)
-  {
-    Serial.print(F(" "));                                                      // Serial print text
-  } // END if
-  Serial.print(Turntable_CurrentTrack);                                        // Serial print value
-  Serial.print(F(" to "));                                                     // Serial print text
-  if (Turntable_NewTrack < 10)
-  {
-    Serial.print(F(" "));                                                      // Serial print text
-  } // END if
-  Serial.print(Turntable_NewTrack);                                            // Serial print value
-  Serial.print(F(", LED: "));                                                  // Serial print text
-  if (DCC_Action_LED < 10)
-  {
-    Serial.print(F(" "));                                                      // Serial print text
-  } // END if
-  Serial.print(DCC_Action_LED);                                                // Serial print value
-  Serial.print(F(", Speed: "));                                                // Serial print text
-  if (speedValue == 0)
-  {
-    Serial.print(F("   "));                                                    // Serial print text
-  } // END if
-  if (speedValue > 0)
-  {
-    Serial.print(F(" "));                                                      // Serial print text
-  } // END if
-  Serial.print(speedValue);                                                    // Serial print value
-  Serial.print(F(", Relay: "));                                                // Serial print text
-  Serial.print(BridgeRelayActive);                                             // Serial print value
-  Serial.print(F(", Lock: "));                                                 // Serial print text
-  Serial.print(TurntableLockActive);                                           // Serial print value
-  Serial.print(F(", Wait: "));                                                 // Serial print text
-  Serial.print(TurntableWaitActive);                                           // Serial print value
-  Serial.print(F(", Watchdog: "));                                             // Serial print text
-  if (WatchdogCounter < 10)
-  {
-    Serial.print(F("  "));                                                     // Serial print text
-  } // END if
-  else if (WatchdogCounter < 100)
-  {
-    Serial.print(F(" "));                                                      // Serial print text
-  } // END else if
-  Serial.print(WatchdogCounter);                                               // Serial print value
-  Serial.println();                                                            // Serial print text
-  WatchdogCounter = 0;
-} // END PrintStatus
-
-//-----------------------------------------------------------------------------//
-void LCDPrintTrackStatus()
-{
-  //           01234567890123456789                                            // Sample text
-//lcd.print(F("Track: .. to .. #..."));                                        // LCD print text
-  if (Turntable_CurrentTrack < 10)
-  {
-    lcd.setCursor(7, 3);                                                       // Set cursor to first line and 8th character
-    lcd.print(F(" "));                                                         // LCD print text
-  //lcd.setCursor(8, 3);                                                       // Set cursor to first line and 9th character
-  } // END if
-  else
-  {
-    lcd.setCursor(7, 3);                                                       // Set cursor to first line and 8th character
-  } // END else
-  lcd.print(Turntable_CurrentTrack);                                           // LCD print value
-  if (Turntable_NewTrack < 10)
-  {
-    lcd.setCursor(13, 3);                                                      // Set cursor to first line and 14th character
-    lcd.print(F(" "));                                                         // LCD print text
-  //lcd.setCursor(14, 3);                                                      // Set cursor to first line and 15th character
-  } // END if
-  else
-  {
-    lcd.setCursor(13, 3);                                                      // Set cursor to first line and 14th character
-  } // END else
-  lcd.print(Turntable_NewTrack);                                               // LCD print value
-  lcd.setCursor(16, 3);                                                        // Set cursor to first line and 17th character
-  if (speedValue == 0)
-  {
-    lcd.print(F("-  "));                                                       // LCD print text
-  } // END if
-  if (speedValue < 0)
-  {
-    lcd.print(F("<"));                                                         // LCD print text
-  } // END if
-  if (speedValue > 0)
-  {
-    lcd.print(F(">"));                                                         // LCD print text
-  } // END if
-  lcd.setCursor(17, 3);                                                        // Set cursor to first line and 18th character
-  if (abs(speedValue) < 100)
-  {
-    lcd.setCursor(18, 3);                                                      // Set cursor to first line and 19th character
-  } // END if
-  if (abs(speedValue) < 10)
-  {
-    lcd.setCursor(19, 3);                                                      // Set cursor to first line and 20th character
-  } // END if
-  lcd.print(abs(speedValue));                                                  // LCD print value
-} // END LCDPrintTrackStatus
-
-//-----------------------------------------------------------------------------//
-void LCDPrintTrackText()                                                       // LCD print text
-{
-  lcd.setCursor(0, 3);                                                         // Set cursor to fourth line and left corner
-  //           01234567890123456789                                            // Sample text
-  lcd.print(F("Track:    to        "));                                        // LCD print text
-} // END LCDPrintTrackText
-
-//-----------------------------------------------------------------------------//
-void TurntableWaitCheck()                                                      // Check Turntable Wait Before Turn Status
-{
-  if (TurntableWaitActive && (millis() > TurntableWaitMillis))                 // Check Turntable Wait Before Turn Active Timer
-  {
-    TurntableWaitActive = false;                                               // Deactivate Turntable Wait Before Turn
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(A) Wait Ready       --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-} // END TurntableWaitCheck
-
-//-----------------------------------------------------------------------------//
-void TurntableLockCheck()                                                      // Check Turntable Lock Status = L293D
-{
-  if (TurntableLockActive && (millis() > TurntableLockMillis))                 // Check Turntable Lock Active Timer
-  {
-    TurntableLockOff();                                                        // Disable Outputs to L293D
-  } // END if
-} // END TurntableLockCheck
-
-//-----------------------------------------------------------------------------//
-void TurntableLockOff()                                                        // Disable Outputs to L293D
-{
-  digitalWrite(Turntable_LockL1, LOW);                                         // Arduino Output Pin 10 = Turntable Lock L1   = Turntable Cable Pin 5
-  digitalWrite(Turntable_LockL2, LOW);                                         // Arduino Output Pin  9 = Turntable Lock L2   = Turntable Cable Pin 6
-  TurntableLockMillis = 0;                                                     // Reset Turntable Lock timer
-  TurntableLockActive = false;                                                 // Set Turntable Lock Not Active
-  //              0123456789012345678901234                                    // Sample text
-  Serial.print(F("(A) Lock Off         --> "));                                // Serial print text
-  PrintStatus();                                                               // Print Actions and Track Numbers
-} // END TurntableLockOff
-
-//-----------------------------------------------------------------------------//
-void TurntableLockResetLock()                                                  // Enable Outputs to L293D - Lock Free
-{
-  digitalWrite(Turntable_LockL1, HIGH);                                        // Arduino Output Pin 10 = Turntable Lock L1   = Turntable Cable Pin 5
-  digitalWrite(Turntable_LockL2, LOW);                                         // Arduino Output Pin  9 = Turntable Lock L2   = Turntable Cable Pin 6
-  TurntableLockMillis = millis() + TurntableLockInterval;                      // Set Turntable Lock Active Timer
-  TurntableLockActive = true;                                                  // Set Turntable Lock Active
-  //              0123456789012345678901234                                    // Sample text
-  Serial.print(F("(A) Lock Reset       --> "));                                // Serial print text
-  PrintStatus();                                                               // Print Actions and Track Numbers
-} // END TurntableLockResetLock
-
-//-----------------------------------------------------------------------------//
-void TurntableLockSetLock()                                                    // Enable Outputs to L293D - Lock Active
-{
-  digitalWrite(Turntable_LockL1, LOW);                                         // Arduino Output Pin 10 = Turntable Lock L1   = Turntable Cable Pin 5
-  digitalWrite(Turntable_LockL2, HIGH);                                        // Arduino Output Pin  9 = Turntable Lock L2   = Turntable Cable Pin 6
-  TurntableLockMillis = millis() + TurntableLockInterval;                      // Set Turntable Lock Active Timer
-  TurntableLockActive = true;                                                  // Set Turntable Lock Active
-  //              0123456789012345678901234                                    // Sample text
-  Serial.print(F("(A) Lock Set         --> "));                                // Serial print text
-  PrintStatus();                                                               // Print Actions and Track Numbers
-} // END TurntableLockSetLock
-
-//=============================================================================//
-void loop()                                                                    // Arduino Main Program
-{
-  if (millis() - WatchdogMillis >= WatchdogInterval)                           // When Watchdog Interval is reached
-  {
-    WatchdogMillis = millis();                                                 // Set Watchdog timer
-    WatchdogState = !WatchdogState;                                            // Change Watchdog State
-    WatchdogCounter++;                                                         // Increase Watchdog counter
-    digitalWrite(WatchdogLED, WatchdogState);                                  // Change Watchdog LED
-  } // END if
-  DCC_Accessory_CheckStatus();                                                 // Check DCC Accessory Status
-  Button_T180_CheckStatus();                                                   // Check Status Button T180
-  Button_Right_CheckStatus();                                                  // Check Status Button RIGHT
-  Button_Left_CheckStatus();                                                   // Check Status Button LEFT
-  Turntable_CheckSwitch();                                                     // Check Kato Turntable Pin 1
-  BridgeRelayCheck();                                                          // Check Bride Relay Status = ULN2803A
-  TurntableLockCheck();                                                        // Check Turntable Lock Status = L293D
-  //===========================================================================//
-  if (Turntable_NewAction == BUT_T180)                                         // Button T180  (Shortpress) = Turn 180
-  {
-    if (Turntable_OldAction != BUT_T180)                                       // Check Old Action
-    {
-      TurntableLockResetLock();                                                // Enable Outputs to L293D - Lock Free
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-    }
-    if (!TurntableLockActive && (millis() > TurntableLockMillis))              // Check Turntable Lock Active Timer
-    {
-      if ((Turntable_CurrentTrack >= 1) && (Turntable_CurrentTrack <= 18))
-      {
-        speedValue = maxSpeed;                                                 // Positive = Direction ClockWise - BUT_T180
-        Turntable_SetMotorSpeed(speedValue);                                   // Motor Forward - BUT_T180
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = MCW;                                             // Set New Action: Move Motor ClockWise
-      } // END if
-      else
-      {
-        speedValue = -maxSpeed;                                                // Negative = Direction Counter ClockWise - BUT_T180
-        Turntable_SetMotorSpeed(speedValue);                                   // Motor Backward - BUT_T180
-        Turntable_OldAction = Turntable_NewAction;                             // Switch Old Action
-        Turntable_NewAction = MCCW;                                            // Set New Action: Move Motor Counter ClockWise
-      } // END else
-      //              0123456789012345678901234                                // Sample text
-      Serial.print(F("(L) BUT_T180         --> "));                            // Serial print text
-      PrintStatus();                                                           // Print Actions and Track Numbers
-	}
-  } // END if
-  //===========================================================================//
-  if ((Turntable_OldAction != BUT_STORE) && (Turntable_NewAction == BUT_STORE))// Button T180  (Longpress)  = Store current position as track 1
-  {
-    Turntable_CurrentTrack = 1;                                                // Bridge in Home Position
-    Turntable_NewTrack = 1;                                                    // Bridge in Home Position
-    DCC_Action_LED_Startup();                                                  // All DCC Action LEDs ON and OFF
-    Turntable_StoreTrack();                                                    // Store Track Position in EEPROM
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = STOP;                                                // Set New Action: STOP
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(L) BUT_STORE        --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-    LCDPrintTrackStatus();                                                     // LCD print text
-  } // END if
-  //===========================================================================//
-  if (Turntable_NewAction == BUT_T1CW)                                         // Button Right (Shortpress) = Turn 1 Step ClockWise
-  {
-    if (Turntable_OldAction != BUT_T1CW)                                       // Check Old Action
-    {
-      TurntableLockResetLock();                                                // Enable Outputs to L293D - Lock Free
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-    }
-    if (!TurntableLockActive && (millis() > TurntableLockMillis))              // Check Turntable Lock Active Timer
-    {
-      speedValue = maxSpeed;                                                   // Positive = Direction ClockWise - BUT_T1CW
-      Turntable_SetMotorSpeed(speedValue);                                     // Motor Forward - BUT_T1CW
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-      Turntable_NewAction = MCW;                                               // Set New Action: Move Motor ClockWise
-      //              0123456789012345678901234                                // Sample text
-      Serial.print(F("(L) BUT_T1CW         --> "));                            // Serial print text
-      PrintStatus();                                                           // Print Actions and Track Numbers
-	}
-  } // END if
-  //===========================================================================//
-  if (Turntable_NewAction == BUT_T1CCW)                                        // Button Left  (Shortpress) = Turn 1 Step Counter ClockWise
-  {
-    if (Turntable_OldAction != BUT_T1CCW)                                      // Check Old Action
-    {
-      TurntableLockResetLock();                                                // Enable Outputs to L293D - Lock Free
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-    }
-    if (!TurntableLockActive && (millis() > TurntableLockMillis))              // Check Turntable Lock Active Timer
-    {
-      speedValue = -maxSpeed;                                                  // Negative = Direction Counter ClockWise - BUT_T1CCW
-      Turntable_SetMotorSpeed(speedValue);                                     // Motor Reverse - BUT_T1CCW
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-      Turntable_NewAction = MCCW;                                              // Set New Action: Move Motor Counter ClockWise
-      //              0123456789012345678901234                                // Sample text
-      Serial.print(F("(L) BUT_T1CCW        --> "));                            // Serial print text
-      PrintStatus();                                                           // Print Actions and Track Numbers
-	}
-  } // END if
-  //===========================================================================//
-  if (Turntable_NewAction == BUT_RLOCK)                                        // Button Right (Longpress)  = Reset Turntable Lock
-  {
-    TurntableLockResetLock();                                                  // Enable Outputs to L293D - Lock Free
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = STOP;                                                // Set New Action: STOP
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(L) BUT_RLOCK        --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  //===========================================================================//
-  if (Turntable_NewAction == BUT_SLOCK)                                        // Button Left  (Longpress)  = Set Turntable Lock
-  {
-    TurntableLockSetLock();                                                    // Enable Outputs to L293D - Lock Active
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = STOP;                                                // Set New Action: STOP
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(L) BUT_SLOCK        --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  //===========================================================================//
-  if ((Turntable_OldAction != DCC_T180) && (Turntable_NewAction == DCC_T180))  // DCC Command Turn 180
-  {
-    if ((Turntable_CurrentTrack >= 1) && (Turntable_CurrentTrack <= 18))
-    {
-      speedValue = maxSpeed;                                                   // Positive = Direction ClockWise - DCC_T180
-      Turntable_SetMotorSpeed(speedValue);                                     // Motor Forward - DCC_T180
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-      Turntable_NewAction = MCW;                                               // Set New Action: Move Motor ClockWise
-    } // END if
-    else
-    {
-      speedValue = -maxSpeed;                                                  // Negative = Direction Counter ClockWise - DCC_T180
-      Turntable_SetMotorSpeed(speedValue);                                     // Motor Backward - DCC_T180
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-      Turntable_NewAction = MCCW;                                              // Set New Action: Move Motor Counter ClockWise
-    } // END else
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(L) DCC_T180         --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  //===========================================================================//
-  if ((Turntable_OldAction != DCC_TURN) && (Turntable_NewAction == DCC_TURN))  // DCC Command Turn - Button 401..436
-  {
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = UNLOCKING;                                           // Set New Action: UNLOCK
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(L) DCC_TURN         --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  //===========================================================================//
-  if (Turntable_NewAction == UNLOCKING)                                        // Unlocking Turntable Lock
-  {
-    if (Turntable_OldAction != UNLOCKING)                                      // Check Old Action
-    {
-      TurntableLockResetLock();                                                // Enable Outputs to L293D - Lock Free
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-    }
-    if (!TurntableLockActive)
-    {
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-      Turntable_NewAction = UNLOCKED;                                          // Set New Action: UNLOCKED
-      //              0123456789012345678901234                                // Sample text
-      Serial.print(F("(L) UNLOCKING        --> "));                            // Serial print text
-      PrintStatus();                                                           // Print Actions and Track Numbers
-    } // END if
-    if (TurntableLockActive && (millis() > TurntableLockMillis))               // Check Turntable Lock Active Timer
-    {
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-      Turntable_NewAction = UNLOCKED;                                          // Set New Action: UNLOCKED
-      //              0123456789012345678901234                                // Sample text
-      Serial.print(F("(L) UNLOCKING        --> "));                            // Serial print text
-      PrintStatus();                                                           // Print Actions and Track Numbers
-    } // END if
-  } // END if
-  //===========================================================================//
-  if (Turntable_NewAction == UNLOCKED)                                         // Turntable Lock Unlocked
-  {
-    TurntableLockOff();                                                        // Disable Outputs to L293D
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = TURN_WAIT;                                           // Set New Action: TURN_WAIT
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(L) UNLOCKED         --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  //===========================================================================//
-  if (Turntable_NewAction == TURN_WAIT)                                        // Turntable Wait Before Turn Status
-  {
-    if (Turntable_OldAction != TURN_WAIT)                                      // Check Old Action
-    {
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-      TurntableWaitMillis = millis() + TurntableWaitInterval;                  // Set Turntable Wait Before Turn Active Timer
-      TurntableWaitActive = true;                                              // Set Turntable Wait Before Turn Active
-      //              0123456789012345678901234                                // Sample text
-      Serial.print(F("(L) Waiting          --> "));                            // Serial print text
-      PrintStatus();                                                           // Print Actions and Track Numbers
-    }
-    if (TurntableWaitActive && (millis() > TurntableWaitMillis))               // Check Turntable Wait Before Turn Active Timer
-    {
-      TurntableWaitActive = false;                                             // Deactivate Turntable Wait Before Turn
-      Turntable_OldAction = Turntable_NewAction;                               // Switch Old Action
-      Turntable_NewAction = SETDIR;                                            // Set New Action: SETDIR
-      //              0123456789012345678901234                                // Sample text
-      Serial.print(F("(L) TURN_WAIT        --> "));                            // Serial print text
-      PrintStatus();                                                           // Print Actions and Track Numbers
-    } // END if
-  } // END if
-  //===========================================================================//
-  if (Turntable_NewAction == SETDIR)                                           // Turntable Wait Before Turn Status
-  {
-    SetDirection();                                                            // Set Direction based Action or Zones
-    // Turntable_OldAction                                                     // Old Action based on SETDIR
-    // Turntable_NewAction                                                     // New Action based on SETDIR
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(L) SETDIR           --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  //===========================================================================//
-  if ((Turntable_OldAction != TCW) && (Turntable_NewAction == TCW))            // Turn ClockWise
-  {
-    speedValue = maxSpeed;                                                     // Positive = Direction ClockWise - TCW
-    Turntable_SetMotorSpeed(speedValue);                                       // Motor Forward - TCW
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = MCW;                                                 // Set New Action: Move Motor ClockWise
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(L) Check TCW        --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  //===========================================================================//
-  if ((Turntable_OldAction != TCCW) && (Turntable_NewAction == TCCW))          // Turn Counter ClockWise
-  {
-    speedValue = -maxSpeed;                                                    // Negative = Direction Counter ClockWise - TCCW
-    Turntable_SetMotorSpeed(speedValue);                                       // Motor Reverse - TCCW
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = MCCW;                                                // Set New Action: Move Motor Counter ClockWise
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(L) Check TCCW       --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-  //===========================================================================//
-  if ((Turntable_OldAction == MCW) && (Turntable_NewAction == POS))            //  Turntable in Position after Move ClockWise
-  {
-    Turntable_CurrentTrack = Turntable_CurrentTrack + 1;
-    if (Turntable_CurrentTrack > maxTrack)                                     // From Track 36 to Track 1
-    {
-      Turntable_CurrentTrack = 1;                                              // Track (1)
-    } // END if
-    Turntable_CheckPos();                                                      // Check if Bridge on wanted track position
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(L) T+1 - Check MCW  --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-    LCDPrintTrackStatus();                                                     // LCD print text
-  } // END if
-  //===========================================================================//
-  if ((Turntable_OldAction == MCCW) && (Turntable_NewAction == POS))           //  Turntable in Position after Move Counter ClockWise
-  {
-    Turntable_CurrentTrack = Turntable_CurrentTrack - 1;
-    if (Turntable_CurrentTrack == 0)                                           // From Track 1 to Track 36
-    {
-      Turntable_CurrentTrack = maxTrack;                                       // Track (maxTrack)
-    } // END if
-    Turntable_CheckPos();                                                      // Check if Bridge in Position
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(L) T-1 - Check MCCW --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-    LCDPrintTrackStatus();                                                     // LCD print text
-  } // END if
-  //===========================================================================//
-  if ((Turntable_OldAction == POS) && (Turntable_NewAction == STOP))           // STOP after Bridge in Position
-  {
-    Turntable_StoreTrack();                                                    // Store Track Position in EEPROM
-    BridgeRelayActive = true;                                                  // Activate Bridge Relay Set
-    BridgeRelaySet();                                                          // Set Bride Relay Status = ULN2803A
-    Turntable_OldAction = Turntable_NewAction;                                 // Switch Old Action
-    Turntable_NewAction = STOP;                                                // Set New Action: STOP
-    //              0123456789012345678901234                                  // Sample text
-    Serial.print(F("(L) STOP             --> "));                              // Serial print text
-    PrintStatus();                                                             // Print Actions and Track Numbers
-  } // END if
-} // END loop
-//-----------------------------------------------------------------------------//
diff --git a/README.md b/README.md
index 2d8a7858f832f8fc8fae499a6323a63855ac969f..3ba586b7962481921ae6b30c2dafe3afeba4f680 100644
--- a/README.md
+++ b/README.md
@@ -1,92 +1,80 @@
-# DCCNext-Controlled-Kato-Turntable
-DCCNext based PCB and additional PCB to control a Kato 20-283 Unitrack Turntable<BR>
-v1.48 uses Littfinski DatenTechnik (LDT) TurnTable Decoder TT-DEC standard.<BR>
-v2.07 uses Fleischmann Turntable Controller 6915 standard.<BR>
-<BR>
-2020-01-17: v2.07 - New Button functionality:<BR>
-Button T180  (Shortpress) = Turn 180<BR>
-Button T180  (Longpress)  = Store current position as track 1<BR>
-Button Right (Shortpress) = Turn 1 Step ClockWise<BR>
-Button Right (Longpress)  = Reset Turntable Lock<BR>
-Button Left  (Shortpress) = Turn 1 Step Counter ClockWise<BR>
-Button Left  (Longpress)  = Set Turntable Lock<BR>
-<BR>
-2020-01-05 v2.00 uses Fleischmann Turntable Controller 6915 standard.<BR>
-DCC Address 400 = Turn 180<BR>
-DCC Address 401 to 436 = Goto Track Number 01 to 36.
-<HR>
-Schematics created in KiCAD v5.1.6<BR>
-Pictures from the additional PCB (top and bottom)<BR>
-<BR>
-Components shopping list:<BR>
-Main Components:<BR>
-DCCNext:<BR>
-https://www.arcomora.com/dccnext/<BR>
-Order your own DCCNext complete package (choose the combiset (DCCNext + USB interf. + Box) here:<BR>
-https://www.arcomora.com/reservation/<BR>
-<BR>
-DCCNext-Controlled-Kato-Turntable PCB:<BR>
-PCB version 1.0 is still available. Can be requested by email to me (only for people in The Netherlands)<BR>
-<BR>
-Resistors: 4x 1kOhm 1/8 Watt
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/4000695402017.html<BR>
-Switches: 3x tactile switch 7 mm
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/32912104842.html<BR>
-Relay: 1x HFD2_005-S-L2-D
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/32983182219.html<BR>
-LED 3mm: 1x Red, 1x Green, 1x Yellow, 1x Blue
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/32848822296.html<BR>
-IC1: H-Bridge: L293D DIP-16
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/33007327277.html<BR>
-IC1-socket: DIP-16
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/4001048163251.html<BR>
-IC2: Darlington Array: ULN2803A DIP-18
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/32959439299.html<BR>
-IC2-socket: DIP-18
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/4001048163251.html<BR>
-Pinheaders 2.54mm: 2x4 pins, 1x8 pins, 1x10 pins
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/32759414721.html<BR>
-Kato Turntable connector: S08B-PASK-2(LF)(SN)
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/1005001693841761.html<BR>
-Screwconnector 5.08mm: 1x2 pins
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/1000006518504.html<BR>
-Arduino Shield Header 10 pins
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/32671697975.html<BR>
-Arduino Shield Header 8 pins
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/32677173846.html<BR>
-<BR>
-Optional:<BR>
-Arduino I2C LCD 20x4 rows
-&nbsp&nbsp&nbsp&nbsp
-https://www.aliexpress.com/item/4001135515638.html<BR>
-
-<HR>
-http://www.katousa.com/N/Unitrack/Turntable.html<BR>
-http://www.katousa.com/images/unitrack/20-283.jpg<BR>
-<BR>
-Followed the standard from Littfinski DatenTechnik (LDT) TurnTable Decoder TT-DEC<BR>
-https://www.ldt-infocenter.com/dokuwiki/doku.php?id=en:tt-dec<BR>
-<BR>
-Fleischmann Turntable Controller 6915<BR>
-https://www.fleischmann.de/en/product/3915-0-0-0-0-0-0-004002005-0/products.html<BR>
-ESU ECoS:<BR>
-http://www.esu.eu/en/products/digital-control/<BR>
-
-Uhlenbrock Intellibox:<BR>
-https://www.uhlenbrock.de/de_DE/produkte/digizen/index.htm<BR>
-
-Model railroad control program called: iTrain:<BR>
-https://www.berros.eu/en/itrain/<BR>
+# Stand-alone Kato 20-283 Turntable Controller
+
+This repository contains an ESP32 (ESP12F) firmware project that drives a Kato 20-283 turntable directly without the DCCNext daughter board. The code implements the Fleischmann 6915 command set so the bridge can be controlled from software such as iTrain or from a command station such as the ESU ECoS.
+
+## Features
+
+* Native ESP32 accessory decoder using the [`NmraDcc`](https://github.com/mrrwa/NmraDcc) library.
+* Accessory addresses **500 – 518** (red/green outputs) select tracks 1 – 36. Address **500** performs a 180° rotation (red = clockwise, green = counter-clockwise).
+* Hardware lock sequencing that pulses the lock coils, waits for the bridge to release, turns the bridge, and re-locks the bridge when in position.
+* Manual control via two buttons on GPIO 9 (counter-clockwise) and GPIO 10 (clockwise), including 180° turns, lock service pulses, and home-track storage.
+* Persistent storage of the last known bridge track in the ESP32 EEPROM.
+* Designed for use with an external auto-reverser: no bridge polarity switching is performed by this firmware.
+
+## Hardware mapping
+
+| Function             | GPIO |
+|----------------------|:----:|
+| Button – Left (CCW)  |  9   |
+| Button – Right (CW)  | 10   |
+| Turntable lock L1    | 16   |
+| Turntable lock L2    |  2   |
+| Turntable index      |  4   |
+| DCC input            |  5   |
+| Motor output M1      | 12   |
+| Motor output M2      | 14   |
+
+The DCC input should feed GPIO 5 through an opto-isolator (for example a 6N137 wired as in the reference circuit supplied with the hardware).
+
+## PlatformIO project layout
+
+```
+.
+├── .vscode/                # VS Code workspace recommendations
+├── include/                # (empty) header folder for future use
+├── lib/                    # (empty) private libraries folder
+├── src/
+│   └── main.cpp            # Firmware entry point
+└── platformio.ini          # Build configuration for ESP32/Arduino
+```
+
+Both `include/` and `lib/` are created automatically by PlatformIO when you first build the project. They remain empty in this repository so you can immediately start adding headers or custom libraries if required.
+
+## Building and flashing with VS Code + PlatformIO
+
+1. Install [Visual Studio Code](https://code.visualstudio.com/) and add the [PlatformIO IDE extension](https://platformio.org/install/ide?install=vscode). Opening this repository will prompt you to install the recommended extension.
+2. Open the project folder (`File → Open Folder…`). PlatformIO will detect `platformio.ini` and prepare the ESP32 toolchain.
+3. Connect your ESP32/ESP12F board, then in the PlatformIO toolbar select **ESP32 Dev Module** (defined in `platformio.ini`).
+4. Build the firmware with **PlatformIO: Build** (`Ctrl/Cmd + Alt + B`) and upload it using **PlatformIO: Upload** (`Ctrl/Cmd + Alt + U`).
+5. The accessory decoder address range is hard-coded; no CV programming is required after flashing.
+
+The firmware depends on the following libraries, which are fetched automatically by PlatformIO:
+
+* [`NmraDcc`](https://github.com/mrrwa/NmraDcc)
+* [`ezButton`](https://github.com/ArduinoGetStarted/button)
+
+## Manual controls
+
+The two physical buttons replicate the original three-button feature set using short, medium, and long presses. Hold times are measured from the moment the button is depressed; releasing the button executes the action.
+
+| Gesture | Action |
+|---------|--------|
+| Left short press (< 0.7 s) | Step 1 track counter-clockwise |
+| Right short press (< 0.7 s) | Step 1 track clockwise |
+| Left medium press (0.7 – 2 s) | Queue a 180° rotation counter-clockwise |
+| Right medium press (0.7 – 2 s) | Queue a 180° rotation clockwise |
+| Left long press (≥ 2 s) | Pulse the lock closed (manual engage) |
+| Right long press (≥ 2 s) | Pulse the lock open (manual release) |
+| Hold both buttons (≥ 2 s) | Store the current bridge position as track 1 (home/track 0 reference) |
+
+Manual lock pulses and home storage only run while the bridge controller is idle. The combined-button gesture mirrors the original "set track 0" function from the three-button controller.
+
+## Operating notes
+
+* The bridge position is stored in EEPROM. If the stored track is not valid after flashing, manually align the bridge to track 1 and use the **hold both buttons** gesture to store the home position.
+* Accessory address 500 (red) rotates the bridge 180° clockwise; address 500 (green) rotates 180° counter-clockwise.
+* Addresses 501 – 518 move to the programmed tracks:
+  * Red output → track 1 – 18 (counter-clockwise direction)
+  * Green output → track 19 – 36 (clockwise direction)
+* The firmware queues a new DCC command when the bridge is already turning; the queued command starts automatically once the current movement finishes.
+
diff --git a/platformio.ini b/platformio.ini
new file mode 100644
index 0000000000000000000000000000000000000000..6bf28bd73c60c34c0e837d7e42c7f7d2c6fb74dc
--- /dev/null
+++ b/platformio.ini
@@ -0,0 +1,8 @@
+[env:esp32dev]
+platform = espressif32
+board = esp32dev
+framework = arduino
+monitor_speed = 115200
+lib_deps =
+  mrrwa/NmraDcc
+  ArduinoGetStarted/ezButton
diff --git a/src/main.cpp b/src/main.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..a41928d95b0616f2842839401c76c714ac661d56
--- /dev/null
+++ b/src/main.cpp
@@ -0,0 +1,731 @@
+#include <Arduino.h>
+#include <NmraDcc.h>
+#include <EEPROM.h>
+#include <ezButton.h>
+
+namespace
+{
+constexpr uint8_t PIN_BUTTON_LEFT = 9;
+constexpr uint8_t PIN_BUTTON_RIGHT = 10;
+constexpr uint8_t PIN_LOCK_L1 = 16;
+constexpr uint8_t PIN_LOCK_L2 = 2;
+constexpr uint8_t PIN_TURNTABLE_SWITCH = 4;
+constexpr uint8_t PIN_DCC_INPUT = 5;
+constexpr uint8_t PIN_MOTOR_M1 = 12;
+constexpr uint8_t PIN_MOTOR_M2 = 14;
+
+constexpr uint8_t TRACK_COUNT = 36;
+constexpr uint16_t BASE_ACCESSORY_ADDRESS = 500;
+constexpr uint8_t EEPROM_ADDRESS_CURRENT_TRACK = 0;
+constexpr uint32_t LOCK_PULSE_DURATION_MS = 500;
+constexpr uint32_t LOCK_SETTLE_DURATION_MS = 600;
+constexpr uint32_t UNLOCK_SETTLE_DURATION_MS = 600;
+constexpr uint32_t STEP_DEBOUNCE_MS = 60;
+constexpr uint32_t BUTTON_MEDIUM_PRESS_MS = 700;
+constexpr uint32_t BUTTON_LONG_PRESS_MS = 2000;
+constexpr uint32_t BUTTON_COMBO_HOLD_MS = 2000;
+constexpr uint8_t MOTOR_PWM_CHANNEL_CW = 0;
+constexpr uint8_t MOTOR_PWM_CHANNEL_CCW = 1;
+constexpr uint16_t MOTOR_PWM_FREQUENCY = 8000;
+constexpr uint8_t MOTOR_PWM_RESOLUTION = 8;
+constexpr uint8_t MOTOR_PWM_VALUE = 220;
+
+struct AccessoryEntry
+{
+  uint16_t address;
+  uint8_t redTrack;
+  uint8_t greenTrack;
+};
+
+enum class MotorDirection : uint8_t
+{
+  Idle,
+  Clockwise,
+  CounterClockwise
+};
+
+enum class TurntableState : uint8_t
+{
+  Idle,
+  Unlocking,
+  WaitingForUnlock,
+  Turning,
+  Locking,
+  LockSettling
+};
+
+enum class ManualLockMode : uint8_t
+{
+  None,
+  Release,
+  Engage
+};
+
+struct MoveCommand
+{
+  bool active = false;
+  bool isRelative = false;
+  uint8_t steps = 0;
+  uint8_t targetTrack = 0;
+  MotorDirection direction = MotorDirection::Idle;
+};
+
+constexpr uint8_t ACCESSORY_COUNT = (TRACK_COUNT / 2) + 1;
+AccessoryEntry accessoryTable[ACCESSORY_COUNT];
+
+NmraDcc Dcc;
+ezButton buttonLeft(PIN_BUTTON_LEFT);
+ezButton buttonRight(PIN_BUTTON_RIGHT);
+
+TurntableState state = TurntableState::Idle;
+MotorDirection currentDirection = MotorDirection::Idle;
+MoveCommand pendingCommand;
+bool currentMoveIsRelative = false;
+uint8_t requestedTrack = 0;
+uint8_t currentTrack = 0;
+uint8_t stepsRemaining = 0;
+
+uint32_t lockDeadline = 0;
+uint32_t settleDeadline = 0;
+uint32_t lastStepMillis = 0;
+
+bool lastIndexActive = false;
+
+ManualLockMode manualLockMode = ManualLockMode::None;
+uint32_t manualLockDeadline = 0;
+uint32_t manualLockSettleDeadline = 0;
+
+bool leftButtonHeld = false;
+bool rightButtonHeld = false;
+bool leftSuppressed = false;
+bool rightSuppressed = false;
+bool comboActive = false;
+bool comboTriggered = false;
+uint32_t leftPressedAt = 0;
+uint32_t rightPressedAt = 0;
+uint32_t comboStartedAt = 0;
+
+void initialiseAccessoryTable()
+{
+  accessoryTable[0] = {BASE_ACCESSORY_ADDRESS, 0, 0};
+  for (uint8_t i = 1; i < ACCESSORY_COUNT; ++i)
+  {
+    const uint16_t address = BASE_ACCESSORY_ADDRESS + i;
+    const uint8_t redTrack = i;
+    uint8_t greenTrack = redTrack + (TRACK_COUNT / 2);
+    if (greenTrack > TRACK_COUNT)
+    {
+      greenTrack -= TRACK_COUNT;
+    }
+    accessoryTable[i] = {address, redTrack, greenTrack};
+  }
+}
+
+uint8_t advanceTrack(uint8_t track, MotorDirection direction)
+{
+  if (track < 1 || track > TRACK_COUNT)
+  {
+    return track;
+  }
+  switch (direction)
+  {
+    case MotorDirection::Clockwise:
+      return (track == TRACK_COUNT) ? 1 : static_cast<uint8_t>(track + 1);
+    case MotorDirection::CounterClockwise:
+      return (track == 1) ? TRACK_COUNT : static_cast<uint8_t>(track - 1);
+    default:
+      return track;
+  }
+}
+
+uint8_t computeSteps(uint8_t from, uint8_t to, MotorDirection direction)
+{
+  if (from < 1 || from > TRACK_COUNT || to < 1 || to > TRACK_COUNT || direction == MotorDirection::Idle)
+  {
+    return 0;
+  }
+  if (from == to)
+  {
+    return 0;
+  }
+  if (direction == MotorDirection::Clockwise)
+  {
+    return (to > from) ? static_cast<uint8_t>(to - from) : static_cast<uint8_t>((TRACK_COUNT - from) + to);
+  }
+  return (from > to) ? static_cast<uint8_t>(from - to) : static_cast<uint8_t>(from + (TRACK_COUNT - to));
+}
+
+void stopMotor()
+{
+  ledcWrite(MOTOR_PWM_CHANNEL_CW, 0);
+  ledcWrite(MOTOR_PWM_CHANNEL_CCW, 0);
+  currentDirection = MotorDirection::Idle;
+}
+
+void driveMotor(MotorDirection direction)
+{
+  if (direction == MotorDirection::Clockwise)
+  {
+    ledcWrite(MOTOR_PWM_CHANNEL_CCW, 0);
+    ledcWrite(MOTOR_PWM_CHANNEL_CW, MOTOR_PWM_VALUE);
+  }
+  else if (direction == MotorDirection::CounterClockwise)
+  {
+    ledcWrite(MOTOR_PWM_CHANNEL_CW, 0);
+    ledcWrite(MOTOR_PWM_CHANNEL_CCW, MOTOR_PWM_VALUE);
+  }
+  else
+  {
+    stopMotor();
+    return;
+  }
+  currentDirection = direction;
+}
+
+void activateLockReleaseOutputs()
+{
+  digitalWrite(PIN_LOCK_L1, HIGH);
+  digitalWrite(PIN_LOCK_L2, LOW);
+}
+
+void activateLockEngageOutputs()
+{
+  digitalWrite(PIN_LOCK_L1, LOW);
+  digitalWrite(PIN_LOCK_L2, HIGH);
+}
+
+void setLockRelease()
+{
+  activateLockReleaseOutputs();
+  lockDeadline = millis() + LOCK_PULSE_DURATION_MS;
+}
+
+void setLockEngage()
+{
+  activateLockEngageOutputs();
+  lockDeadline = millis() + LOCK_PULSE_DURATION_MS;
+}
+
+void lockOutputsOff()
+{
+  digitalWrite(PIN_LOCK_L1, LOW);
+  digitalWrite(PIN_LOCK_L2, LOW);
+}
+
+void saveCurrentTrack()
+{
+  if (currentTrack < 1 || currentTrack > TRACK_COUNT)
+  {
+    return;
+  }
+  if (EEPROM.read(EEPROM_ADDRESS_CURRENT_TRACK) != currentTrack)
+  {
+    EEPROM.write(EEPROM_ADDRESS_CURRENT_TRACK, currentTrack);
+    EEPROM.commit();
+  }
+}
+
+void storeCurrentAsTrackOne()
+{
+  stopMotor();
+  pendingCommand.active = false;
+  pendingCommand.isRelative = false;
+  pendingCommand.steps = 0;
+  pendingCommand.targetTrack = 0;
+  pendingCommand.direction = MotorDirection::Idle;
+  requestedTrack = 0;
+  stepsRemaining = 0;
+  currentMoveIsRelative = false;
+  currentDirection = MotorDirection::Idle;
+  currentTrack = 1;
+  saveCurrentTrack();
+}
+
+void requestManualLockRelease()
+{
+  if (state != TurntableState::Idle || manualLockMode != ManualLockMode::None)
+  {
+    return;
+  }
+  stopMotor();
+  const uint32_t now = millis();
+  activateLockReleaseOutputs();
+  manualLockMode = ManualLockMode::Release;
+  manualLockDeadline = now + LOCK_PULSE_DURATION_MS;
+  manualLockSettleDeadline = manualLockDeadline + UNLOCK_SETTLE_DURATION_MS;
+}
+
+void requestManualLockEngage()
+{
+  if (state != TurntableState::Idle || manualLockMode != ManualLockMode::None)
+  {
+    return;
+  }
+  stopMotor();
+  const uint32_t now = millis();
+  activateLockEngageOutputs();
+  manualLockMode = ManualLockMode::Engage;
+  manualLockDeadline = now + LOCK_PULSE_DURATION_MS;
+  manualLockSettleDeadline = 0;
+}
+
+void startLockingSequence()
+{
+  stopMotor();
+  setLockEngage();
+  state = TurntableState::Locking;
+}
+
+void finalizeMovement()
+{
+  if (!currentMoveIsRelative && requestedTrack >= 1 && requestedTrack <= TRACK_COUNT)
+  {
+    currentTrack = requestedTrack;
+  }
+  saveCurrentTrack();
+  requestedTrack = 0;
+  stepsRemaining = 0;
+  currentMoveIsRelative = false;
+  currentDirection = MotorDirection::Idle;
+}
+
+void onIndexPulse()
+{
+  if (state != TurntableState::Turning || stepsRemaining == 0)
+  {
+    return;
+  }
+  if (currentTrack >= 1 && currentTrack <= TRACK_COUNT)
+  {
+    currentTrack = advanceTrack(currentTrack, currentDirection);
+  }
+  if (stepsRemaining > 0)
+  {
+    --stepsRemaining;
+  }
+  if (stepsRemaining == 0)
+  {
+    if (!currentMoveIsRelative && requestedTrack >= 1)
+    {
+      currentTrack = requestedTrack;
+    }
+    startLockingSequence();
+  }
+}
+
+void handleIndexSensor(uint32_t now)
+{
+  const bool active = digitalRead(PIN_TURNTABLE_SWITCH) == LOW;
+  if (active && !lastIndexActive && (now - lastStepMillis) >= STEP_DEBOUNCE_MS)
+  {
+    lastStepMillis = now;
+    onIndexPulse();
+  }
+  lastIndexActive = active;
+}
+
+void handleManualLock(uint32_t now)
+{
+  if (manualLockMode == ManualLockMode::None)
+  {
+    return;
+  }
+  if (manualLockDeadline != 0 && now >= manualLockDeadline)
+  {
+    lockOutputsOff();
+    manualLockDeadline = 0;
+  }
+  if (manualLockMode == ManualLockMode::Release)
+  {
+    if (manualLockDeadline == 0 && manualLockSettleDeadline != 0 && now >= manualLockSettleDeadline)
+    {
+      manualLockMode = ManualLockMode::None;
+      manualLockSettleDeadline = 0;
+      manualLockDeadline = 0;
+    }
+  }
+  else if (manualLockMode == ManualLockMode::Engage)
+  {
+    if (manualLockDeadline == 0)
+    {
+      manualLockMode = ManualLockMode::None;
+    }
+  }
+}
+
+void processPendingCommand()
+{
+  if (!pendingCommand.active || state != TurntableState::Idle)
+  {
+    return;
+  }
+  MoveCommand command = pendingCommand;
+  pendingCommand.active = false;
+  if (command.steps == 0)
+  {
+    return;
+  }
+  currentMoveIsRelative = command.isRelative;
+  requestedTrack = command.targetTrack;
+  stepsRemaining = command.steps;
+  currentDirection = command.direction;
+  state = TurntableState::Unlocking;
+  setLockRelease();
+}
+
+void queueMove(const MoveCommand &command)
+{
+  if (!command.active || command.steps == 0 || command.direction == MotorDirection::Idle)
+  {
+    return;
+  }
+  if (state == TurntableState::Idle)
+  {
+    pendingCommand = command;
+    processPendingCommand();
+    return;
+  }
+  pendingCommand = command;
+  pendingCommand.active = true;
+}
+
+void requestRelative(uint8_t steps, MotorDirection direction)
+{
+  if (steps == 0)
+  {
+    return;
+  }
+  MoveCommand command;
+  command.active = true;
+  command.isRelative = true;
+  command.steps = steps;
+  command.direction = direction;
+  command.targetTrack = 0;
+  if (currentTrack < 1 || currentTrack > TRACK_COUNT)
+  {
+    currentTrack = (direction == MotorDirection::Clockwise) ? 1 : TRACK_COUNT;
+  }
+  queueMove(command);
+}
+
+void requestAbsolute(uint8_t targetTrack, MotorDirection preferredDirection)
+{
+  if (targetTrack < 1 || targetTrack > TRACK_COUNT)
+  {
+    return;
+  }
+  if (currentTrack < 1 || currentTrack > TRACK_COUNT)
+  {
+    return;
+  }
+  const uint8_t steps = computeSteps(currentTrack, targetTrack, preferredDirection);
+  if (steps == 0)
+  {
+    if (currentTrack != targetTrack)
+    {
+      return;
+    }
+    saveCurrentTrack();
+    return;
+  }
+  MoveCommand command;
+  command.active = true;
+  command.isRelative = false;
+  command.steps = steps;
+  command.targetTrack = targetTrack;
+  command.direction = preferredDirection;
+  queueMove(command);
+}
+
+void requestTurn180(MotorDirection direction)
+{
+  if (direction == MotorDirection::Idle)
+  {
+    return;
+  }
+  if (currentTrack < 1 || currentTrack > TRACK_COUNT)
+  {
+    currentTrack = (direction == MotorDirection::Clockwise) ? 1 : TRACK_COUNT;
+  }
+  MoveCommand command;
+  command.active = true;
+  command.isRelative = true;
+  command.steps = TRACK_COUNT / 2;
+  command.direction = direction;
+  if (currentTrack >= 1 && currentTrack <= TRACK_COUNT)
+  {
+    int16_t offset = (direction == MotorDirection::Clockwise) ? (TRACK_COUNT / 2) : -(TRACK_COUNT / 2);
+    int16_t track = static_cast<int16_t>(currentTrack) + offset;
+    while (track < 1)
+    {
+      track += TRACK_COUNT;
+    }
+    while (track > TRACK_COUNT)
+    {
+      track -= TRACK_COUNT;
+    }
+    command.targetTrack = static_cast<uint8_t>(track);
+  }
+  queueMove(command);
+}
+
+void handleDccCommand(uint16_t address, uint8_t direction)
+{
+  for (const auto &entry : accessoryTable)
+  {
+    if (entry.address != address)
+    {
+      continue;
+    }
+    if (entry.address == BASE_ACCESSORY_ADDRESS)
+    {
+      const MotorDirection turnDirection = (direction == 0) ? MotorDirection::Clockwise : MotorDirection::CounterClockwise;
+      requestTurn180(turnDirection);
+    }
+    else
+    {
+      const bool isGreen = (direction != 0);
+      const uint8_t target = isGreen ? entry.greenTrack : entry.redTrack;
+      const MotorDirection preferred = isGreen ? MotorDirection::Clockwise : MotorDirection::CounterClockwise;
+      requestAbsolute(target, preferred);
+    }
+    return;
+  }
+}
+
+} // namespace
+
+void handleLeftButtonAction(uint32_t pressDuration)
+{
+  if (pressDuration >= BUTTON_LONG_PRESS_MS)
+  {
+    requestManualLockEngage();
+  }
+  else if (pressDuration >= BUTTON_MEDIUM_PRESS_MS)
+  {
+    requestTurn180(MotorDirection::CounterClockwise);
+  }
+  else
+  {
+    requestRelative(1, MotorDirection::CounterClockwise);
+  }
+}
+
+void handleRightButtonAction(uint32_t pressDuration)
+{
+  if (pressDuration >= BUTTON_LONG_PRESS_MS)
+  {
+    requestManualLockRelease();
+  }
+  else if (pressDuration >= BUTTON_MEDIUM_PRESS_MS)
+  {
+    requestTurn180(MotorDirection::Clockwise);
+  }
+  else
+  {
+    requestRelative(1, MotorDirection::Clockwise);
+  }
+}
+
+void notifyDccAccTurnoutOutput(uint16_t address, uint8_t direction, uint8_t outputPower)
+{
+  if (outputPower == 0)
+  {
+    return;
+  }
+  handleDccCommand(address, direction);
+}
+
+void configurePins()
+{
+  pinMode(PIN_BUTTON_LEFT, INPUT_PULLUP);
+  pinMode(PIN_BUTTON_RIGHT, INPUT_PULLUP);
+  pinMode(PIN_TURNTABLE_SWITCH, INPUT_PULLUP);
+  pinMode(PIN_LOCK_L1, OUTPUT);
+  pinMode(PIN_LOCK_L2, OUTPUT);
+  pinMode(PIN_MOTOR_M1, OUTPUT);
+  pinMode(PIN_MOTOR_M2, OUTPUT);
+  pinMode(PIN_DCC_INPUT, INPUT);
+
+  digitalWrite(PIN_LOCK_L1, LOW);
+  digitalWrite(PIN_LOCK_L2, LOW);
+  digitalWrite(PIN_MOTOR_M1, LOW);
+  digitalWrite(PIN_MOTOR_M2, LOW);
+
+  ledcSetup(MOTOR_PWM_CHANNEL_CW, MOTOR_PWM_FREQUENCY, MOTOR_PWM_RESOLUTION);
+  ledcSetup(MOTOR_PWM_CHANNEL_CCW, MOTOR_PWM_FREQUENCY, MOTOR_PWM_RESOLUTION);
+  ledcAttachPin(PIN_MOTOR_M1, MOTOR_PWM_CHANNEL_CW);
+  ledcAttachPin(PIN_MOTOR_M2, MOTOR_PWM_CHANNEL_CCW);
+}
+
+void loadCurrentTrack()
+{
+  currentTrack = EEPROM.read(EEPROM_ADDRESS_CURRENT_TRACK);
+  if (currentTrack < 1 || currentTrack > TRACK_COUNT)
+  {
+    currentTrack = 1;
+  }
+}
+
+void setup()
+{
+  Serial.begin(115200);
+  initialiseAccessoryTable();
+  configurePins();
+
+  EEPROM.begin(32);
+  loadCurrentTrack();
+
+  buttonLeft.setDebounceTime(35);
+  buttonRight.setDebounceTime(35);
+
+  Dcc.pin(PIN_DCC_INPUT, true);
+  Dcc.init(MAN_ID_DIY, 1, FLAGS_OUTPUT_ADDRESS_MODE | FLAGS_DCC_ACCESSORY_DECODER, 0, false);
+}
+
+void handleButtons()
+{
+  buttonLeft.loop();
+  buttonRight.loop();
+
+  const uint32_t now = millis();
+
+  if (buttonLeft.isPressed())
+  {
+    leftButtonHeld = true;
+    leftPressedAt = now;
+    leftSuppressed = false;
+    if (rightButtonHeld)
+    {
+      comboActive = true;
+      comboStartedAt = (leftPressedAt > rightPressedAt) ? leftPressedAt : rightPressedAt;
+    }
+  }
+
+  if (buttonRight.isPressed())
+  {
+    rightButtonHeld = true;
+    rightPressedAt = now;
+    rightSuppressed = false;
+    if (leftButtonHeld)
+    {
+      comboActive = true;
+      comboStartedAt = (leftPressedAt > rightPressedAt) ? leftPressedAt : rightPressedAt;
+    }
+  }
+
+  if (leftButtonHeld && rightButtonHeld)
+  {
+    if (!comboActive)
+    {
+      comboActive = true;
+      comboStartedAt = (leftPressedAt > rightPressedAt) ? leftPressedAt : rightPressedAt;
+    }
+    if (!comboTriggered && (now - comboStartedAt) >= BUTTON_COMBO_HOLD_MS)
+    {
+      if (state == TurntableState::Idle && manualLockMode == ManualLockMode::None)
+      {
+        storeCurrentAsTrackOne();
+      }
+      comboTriggered = true;
+      leftSuppressed = true;
+      rightSuppressed = true;
+    }
+  }
+  else
+  {
+    comboActive = false;
+    comboStartedAt = 0;
+  }
+
+  if (buttonLeft.isReleased())
+  {
+    const uint32_t duration = now - leftPressedAt;
+    leftButtonHeld = false;
+    if (!leftSuppressed && !comboTriggered)
+    {
+      handleLeftButtonAction(duration);
+    }
+    leftSuppressed = false;
+    if (!leftButtonHeld && !rightButtonHeld)
+    {
+      comboTriggered = false;
+    }
+  }
+
+  if (buttonRight.isReleased())
+  {
+    const uint32_t duration = now - rightPressedAt;
+    rightButtonHeld = false;
+    if (!rightSuppressed && !comboTriggered)
+    {
+      handleRightButtonAction(duration);
+    }
+    rightSuppressed = false;
+    if (!leftButtonHeld && !rightButtonHeld)
+    {
+      comboTriggered = false;
+    }
+  }
+
+  if (!leftButtonHeld && !rightButtonHeld && !comboTriggered)
+  {
+    comboStartedAt = 0;
+  }
+}
+
+void updateTurntable()
+{
+  const uint32_t now = millis();
+  handleManualLock(now);
+  switch (state)
+  {
+    case TurntableState::Idle:
+      if (manualLockMode == ManualLockMode::None)
+      {
+        processPendingCommand();
+      }
+      break;
+    case TurntableState::Unlocking:
+      if (now >= lockDeadline)
+      {
+        lockOutputsOff();
+        state = TurntableState::WaitingForUnlock;
+        settleDeadline = now + UNLOCK_SETTLE_DURATION_MS;
+      }
+      break;
+    case TurntableState::WaitingForUnlock:
+      if (now >= settleDeadline)
+      {
+        driveMotor(currentDirection);
+        state = TurntableState::Turning;
+      }
+      break;
+    case TurntableState::Turning:
+      handleIndexSensor(now);
+      break;
+    case TurntableState::Locking:
+      if (now >= lockDeadline)
+      {
+        lockOutputsOff();
+        state = TurntableState::LockSettling;
+        settleDeadline = now + LOCK_SETTLE_DURATION_MS;
+      }
+      break;
+    case TurntableState::LockSettling:
+      if (now >= settleDeadline)
+      {
+        finalizeMovement();
+        state = TurntableState::Idle;
+        processPendingCommand();
+      }
+      break;
+  }
+}
+
+void loop()
+{
+  Dcc.process();
+  handleButtons();
+  updateTurntable();
+}
